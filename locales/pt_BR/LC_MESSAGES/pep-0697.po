# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0697.rst
msgid "Author"
msgstr ""

#: ../pep-0697.rst:3
msgid "Petr Viktorin <encukou@gmail.com>"
msgstr ""

#: ../pep-0697.rst
msgid "Discussions-To"
msgstr ""

#: ../pep-0697.rst:4
msgid "https://discuss.python.org/t/19743"
msgstr ""

#: ../pep-0697.rst
msgid "Status"
msgstr ""

#: ../pep-0697.rst:5
msgid "Draft"
msgstr ""

#: ../pep-0697.rst
msgid "Type"
msgstr ""

#: ../pep-0697.rst:6
msgid "Standards Track"
msgstr ""

#: ../pep-0697.rst
msgid "Created"
msgstr ""

#: ../pep-0697.rst:8
msgid "23-Aug-2022"
msgstr ""

#: ../pep-0697.rst
msgid "Python-Version"
msgstr ""

#: ../pep-0697.rst:9
msgid "3.12"
msgstr ""

#: ../pep-0697.rst
msgid "Post-History"
msgstr ""

#: ../pep-0697.rst:10
msgid ""
"`24-May-2022 <https://mail.python.org/archives/list/capi-sig@python.org/"
"thread/SIP3VP7JU4OBWP62KBOYGOYCVIOTXEFH/>`__, `06-Oct-2022 <https://discuss."
"python.org/t/19743>`__,"
msgstr ""

#: ../pep-0697.rst:15
msgid "Abstract"
msgstr ""

#: ../pep-0697.rst:17
msgid ""
"Add `Limited C API <https://docs.python.org/3.11/c-api/stable.html#stable-"
"application-binary-interface>`__ for extending types with opaque data, by "
"allowing code to only deal with data specific to a particular (sub)class."
msgstr ""

#: ../pep-0697.rst:21
msgid "Make the mechanism usable with ``PyHeapTypeObject``."
msgstr ""

#: ../pep-0697.rst:25
msgid "Motivation"
msgstr ""

#: ../pep-0697.rst:27
msgid ""
"The motivating problem this PEP solves is creating metaclasses (subclasses "
"of :py:class:`python:type`) in “wrappers” – projects that expose another "
"type system (e.g. C++, Java, Rust) as Python classes. These systems "
"typically need to attach information about the “wrapped” non-Python class to "
"the Python type object -- that is, extend ``PyHeapTypeObject``."
msgstr ""

#: ../pep-0697.rst:34
msgid ""
"This should be possible to do in the Limited API, so that these generators "
"can be used to create Stable ABI extensions. (See :pep:`652` for the "
"benefits of providing a stable ABI.)"
msgstr ""

#: ../pep-0697.rst:38
msgid ""
"Extending ``type`` is an instance of a more general problem: extending a "
"class while maintaining loose coupling – that is, not depending on the "
"memory layout used by the superclass. (That's a lot of jargon; see Rationale "
"for a concrete example of extending ``list``.)"
msgstr ""

#: ../pep-0697.rst:46
msgid "Rationale"
msgstr ""

#: ../pep-0697.rst:49
msgid "Extending opaque types"
msgstr ""

#: ../pep-0697.rst:51
msgid ""
"In the Limited API, most ``struct``\\ s are opaque: their size and memory "
"layout are not exposed, so they can be changed in new versions of CPython "
"(or alternate implementations of the C API)."
msgstr ""

#: ../pep-0697.rst:55
msgid ""
"This means that the usual subclassing pattern -- making the ``struct`` used "
"for instances of the *base* type be the first element of the ``struct`` used "
"for instances of the *derived* type -- does not work. To illustrate with "
"code, the `example from the tutorial <https://docs.python.org/3.11/extending/"
"newtypes_tutorial.html#subclassing-other-types>`_ extends :external+python:c:"
"type:`PyListObject` (:py:class:`python:list`) using the following ``struct``:"
msgstr ""

#: ../pep-0697.rst:69
msgid ""
"This won't compile in the Limited API, since ``PyListObject`` is opaque (to "
"allow changes as features and optimizations are implemented)."
msgstr ""

#: ../pep-0697.rst:72
msgid ""
"Instead, this PEP proposes using a ``struct`` with only the state needed in "
"the subclass, that is:"
msgstr ""

#: ../pep-0697.rst:83
msgid ""
"The subclass can now be completely decoupled from the memory layout (and "
"size) of the superclass."
msgstr ""

#: ../pep-0697.rst:86
msgid "This is possible today. To use such a struct:"
msgstr ""

#: ../pep-0697.rst:88
msgid ""
"when creating the class, use ``PyListObject->tp_basicsize + "
"sizeof(SubListState)`` as ``PyType_Spec.basicsize``;"
msgstr ""

#: ../pep-0697.rst:90
msgid ""
"when accessing the data, use ``PyListObject->tp_basicsize`` as the offset "
"into the instance (``PyObject*``)."
msgstr ""

#: ../pep-0697.rst:93
msgid "However, this has disadvantages:"
msgstr ""

#: ../pep-0697.rst:95
msgid ""
"The base's ``basicsize`` may not be properly aligned, causing issues on some "
"architectures if not mitigated. (These issues can be particularly nasty if "
"alignment changes in a new release.)"
msgstr ""

#: ../pep-0697.rst:98
msgid ""
"``PyTypeObject.tp_basicsize`` is not exposed in the Limited API, so "
"extensions that support Limited API need to use "
"``PyObject_GetAttrString(obj, \"__basicsize__\")``. This is cumbersome, and "
"unsafe in edge cases (the Python attribute can be overridden)."
msgstr ""

#: ../pep-0697.rst:103
msgid "Variable-size types are not handled (see `var-sized`_ below)."
msgstr ""

#: ../pep-0697.rst:105
msgid ""
"To make this easy (and even *best practice* for projects that choose loose "
"coupling over maximum performance), this PEP proposes an API to:"
msgstr ""

#: ../pep-0697.rst:108
msgid ""
"During class creation, specify that ``SubListState`` should be “appended” to "
"``PyListObject``, without passing any additional details about ``list``. "
"(The interpreter itself gets all necessary info, like ``tp_basicsize``, from "
"the base)."
msgstr ""

#: ../pep-0697.rst:113
msgid ""
"This will be specified by a negative ``PyType_Spec.basicsize``: ``-"
"sizeof(SubListState)``."
msgstr ""

#: ../pep-0697.rst:116
msgid ""
"Given an instance, and the subclass ``PyTypeObject*``, get a pointer to the "
"``SubListState``. A new function will be added for this."
msgstr ""

#: ../pep-0697.rst:120
msgid ""
"The base class is not limited to ``PyListObject``, of course: it can be used "
"to extend any base class whose instance ``struct`` is opaque, unstable "
"across releases, or not exposed at all -- including :py:class:`python:type` "
"(``PyHeapTypeObject``) mentioned earlier, but also other extensions (for "
"example, NumPy arrays [#f1]_)."
msgstr ""

#: ../pep-0697.rst:126
msgid ""
"For cases where no additional state is needed, a zero ``basicsize`` will be "
"allowed: in that case, the base's ``tp_basicsize`` will be inherited. (With "
"the current API, the base's ``basicsize`` needs to be passed in.)"
msgstr ""

#: ../pep-0697.rst:130
msgid ""
"The ``tp_basicsize`` of the new class will be set to the computed total "
"size, so code that inspects classes will continue working as before."
msgstr ""

#: ../pep-0697.rst:137
msgid "Extending variable-size objects"
msgstr ""

#: ../pep-0697.rst:139
msgid ""
"Additional considerations are needed to subclass :external+python:c:type:"
"`variable-sized objects <PyVarObject>` while maintaining loose coupling as "
"much as possible."
msgstr ""

#: ../pep-0697.rst:143
msgid ""
"Unfortunately, in this case we cannot decouple the subclass from its "
"superclass entirely. There are two main memory layouts for variable-sized "
"objects, and the subclass's author needs to know which one the superclass "
"uses."
msgstr ""

#: ../pep-0697.rst:148
msgid ""
"In types such as ``int`` or ``tuple``, the variable data is stored at a "
"fixed offset. If subclasses need additional space, it must be added after "
"any variable-sized data::"
msgstr ""

#: ../pep-0697.rst:163
msgid ""
"In other types, like ``PyHeapTypeObject``, variable-sized data always lives "
"at the end of the instance's memory area::"
msgstr ""

#: ../pep-0697.rst:176
msgid ""
"The first layout enables fast access to the items array. The second allows "
"subclasses to ignore the variable-sized array (assuming they use offsets "
"from the start of the object to access their data)."
msgstr ""

#: ../pep-0697.rst:180
msgid ""
"Which layout is used is, unfortunately, an implementation detail that the "
"subclass code must take into account. Correspondingly, if a variable-sized "
"type is designed to be extended in C, its documentation should note the "
"mechanism used. Since this PEP focuses on ``PyHeapTypeObject``, it proposes "
"API for the second variant."
msgstr ""

#: ../pep-0697.rst:187
msgid ""
"Like with fixed-size types, extending a variable-sized type is already "
"possible: when creating the class, ``base->tp_itemsize`` needs to be passed "
"as ``PyType_Spec.itemsize``. This is cumbersome in the Limited API, where "
"one needs to resort to ``PyObject_GetAttrString(obj, \"__itemsize__\")``, "
"with the same caveats as for ``__basicsize__`` above."
msgstr ""

#: ../pep-0697.rst:194
msgid ""
"This PEP proposes a mechanism to instruct the interpreter to do this on its "
"own, without the extension needing to read ``base->tp_itemsize``."
msgstr ""

#: ../pep-0697.rst:197
msgid "Several alternatives for this mechanism were rejected:"
msgstr ""

#: ../pep-0697.rst:199
msgid ""
"The easiest way to do this would be to allow leaving ``itemsize`` as 0 to "
"mean “inherit”. However, unlike ``basicsize`` zero is a valid value for "
"``itemsize`` -- it marks fixed-sized types. Also, in C, zero is the default "
"value used when ``itemsize`` is not specified. Since extending a variable-"
"sized type requires *some* knowledge of the superclass, it would be a good "
"idea to require a more explicit way to request it."
msgstr ""

#: ../pep-0697.rst:207
msgid ""
"It would be possible to reserve a special negative value like "
"``itemsize=-1`` to mean “inherit”. But this would rule out a possible future "
"where negative ``itemsize`` more closely matches negative ``basicsize`` -- a "
"request for additional space."
msgstr ""

#: ../pep-0697.rst:212
msgid ""
"A new flag would also work, but ``tp_flags`` is running out of free bits. "
"Reserving one for a flag only used in type creation seems wasteful."
msgstr ""

#: ../pep-0697.rst:215
msgid ""
"So, this PEP proposes a new :external+python:c:type:`PyType_Slot` to mark "
"that ``tp_itemsize`` hould be inherited. When this flag is used, "
"``itemsize`` must be set to zero. Like with ``tp_basicsize``, "
"``tp_itemsize`` will be set to the computed value as the class is created."
msgstr ""

#: ../pep-0697.rst:223
msgid "Normalizing the ``PyHeapTypeObject``-like layout"
msgstr ""

#: ../pep-0697.rst:225
msgid ""
"Additionally, this PEP proposes a helper function to get the variable-sized "
"data of a given instance, assuming it uses the ``PyHeapTypeObject``-like "
"layout. This is mainly to make it easier to define and document such types."
msgstr ""

#: ../pep-0697.rst:229
msgid "This function will not be exposed in the Limited API."
msgstr ""

#: ../pep-0697.rst:233 ../pep-0697.rst:343
msgid "Relative member offsets"
msgstr ""

#: ../pep-0697.rst:235
msgid ""
"One more piece of the puzzle is ``PyMemberDef.offset``. Extensions that use "
"a subclass-specific ``struct`` (``SubListState`` above) will get a way to "
"specify “relative” offsets -- offsets based on this ``struct`` -- rather "
"than to “absolute” ones (based on ``PyObject*``)."
msgstr ""

#: ../pep-0697.rst:240
msgid ""
"One way to do it would be to automatically assume “relative” offsets if this "
"PEP's API is used to create a class. However, this implicit assumption may "
"be too surprising."
msgstr ""

#: ../pep-0697.rst:244
msgid ""
"To be more explicit, this PEP proposes a new flag for “relative” offsets. At "
"least initially, this flag will serve only a check against misuse (and a "
"hint for reviewers). It must be present if used with the new API, and must "
"not be used otherwise."
msgstr ""

#: ../pep-0697.rst:251
msgid "Specification"
msgstr ""

#: ../pep-0697.rst:253
msgid ""
"In the code blocks below, only function headers are part of the "
"specification. Other code (the size/offset calculations) are details of the "
"initial CPython implementation, and subject to change."
msgstr ""

#: ../pep-0697.rst:258
msgid "Relative ``basicsize``"
msgstr ""

#: ../pep-0697.rst:260
msgid ""
"The ``basicsize`` member of ``PyType_Spec`` will be allowed to be zero or "
"negative. In that case, it will specify the inverse of *extra* storage space "
"instances of the new class require, in addition to the basicsize of the base "
"class. That is, the basicsize of the resulting class will be:"
msgstr ""

#: ../pep-0697.rst:270
msgid ""
"where ``_align`` rounds up to a multiple of ``alignof(max_align_t)``. When "
"``spec->basicsize`` is zero, ``base->tp_basicsize`` will be inherited "
"directly instead (i.e. set to ``base->tp_basicsize`` without aligning)."
msgstr ""

#: ../pep-0697.rst:274
msgid ""
"On an instance, the memory area specific to a subclass -- that is, the "
"“extra space” that subclass reserves in addition its base -- will be "
"available through a new function, ``PyObject_GetTypeData``. In CPython, this "
"function will be defined as:"
msgstr ""

#: ../pep-0697.rst:286
msgid ""
"Another function will be added to retreive the size of this memory area:"
msgstr ""

#: ../pep-0697.rst:295
msgid ""
"The new ``*Get*`` functions come with an important caveat, which will be "
"pointed out in documentation: They may only be used for classes created "
"using negative ``PyType_Spec.basicsize``. For other classes, their behavior "
"is undefined. (Note that this allows the above code to assume ``cls-"
">tp_base`` is not ``NULL``.)"
msgstr ""

#: ../pep-0697.rst:304
msgid "Inheriting ``itemsize``"
msgstr ""

#: ../pep-0697.rst:306
msgid ""
"If a new slot, ``Py_tp_inherit_itemsize``, is present in ``PyType_Spec."
"slots``, the new class will inherit the base's ``tp_itemsize``."
msgstr ""

#: ../pep-0697.rst:310
msgid "If this is the case, CPython will assert that:"
msgstr ""

#: ../pep-0697.rst:312
msgid "``PyType_Spec.itemsize`` must be set to zero."
msgstr ""

#: ../pep-0697.rst:313
msgid ""
"The ``Py_tp_inherit_itemsize`` slot's ``~PyType_Slot.pfunc`` must be set to "
"NULL."
msgstr ""

#: ../pep-0697.rst:316
msgid ""
"A new function, ``PyObject_GetItemData``, will be added to safely access the "
"memory reserved for items, taking subclasses that extend ``tp_basicsize`` "
"into account. In CPython it will be defined as:"
msgstr ""

#: ../pep-0697.rst:328
msgid "This function will *not* be added to the Limited API."
msgstr ""

#: ../pep-0697.rst:330
msgid ""
"Note that it **is not safe** to use **any** of the functions added in this "
"PEP unless **all classes in the inheritance hierarchy** only use "
"``PyObject_GetItemData`` (or an equivalent) for per-item memory, or don't "
"use per-item memory at all. (This issue already exists for most current "
"classes that use variable-length arrays in the instance struct, but it's "
"much less obvious if the base struct layout is unknown.)"
msgstr ""

#: ../pep-0697.rst:338
msgid ""
"The documentation for all API added in this PEP will mention the caveat."
msgstr ""

#: ../pep-0697.rst:345
msgid ""
"In types defined using negative ``PyType_Spec.basicsize``, the offsets of "
"members defined via ``Py_tp_members`` must be relative to the extra subclass "
"data, rather than the full ``PyObject`` struct. This will be indicated by a "
"new flag, ``PY_RELATIVE_OFFSET``."
msgstr ""

#: ../pep-0697.rst:350
msgid ""
"In the initial implementation, the new flag will be redundant. It only "
"serves to make the offset's changed meaning clear, and to help avoid "
"mistakes. It will be an error to *not* use ``PY_RELATIVE_OFFSET`` with "
"negative ``basicsize``, and it will be an error to use it in any other "
"context (i.e. direct or indirect calls to ``PyDescr_NewMember``, "
"``PyMember_GetOne``, ``PyMember_SetOne``)."
msgstr ""

#: ../pep-0697.rst:357
msgid ""
"CPython will adjust the offset and clear the ``PY_RELATIVE_OFFSET`` flag "
"when intitializing a type. This means that the created type's ``tp_members`` "
"will not match the input definition's ``Py_tp_members`` slot, and that any "
"code that reads ``tp_members`` will not need to handle the flag."
msgstr ""

#: ../pep-0697.rst:365
msgid "Changes to ``PyTypeObject``"
msgstr ""

#: ../pep-0697.rst:367
msgid ""
"Internally in CPython, access to ``PyTypeObject`` "
"“items” (``_PyHeapType_GET_MEMBERS``) will be changed to use "
"``PyObject_GetItemData``. Note that the current implementation is "
"equivalent: it only lacks the alignment adjustment. The macro is used a few "
"times in type creation, so no measurable performance impact is expected. "
"Public API for this data, ``tp_members``, will not be affected."
msgstr ""

#: ../pep-0697.rst:377
msgid "List of new API"
msgstr ""

#: ../pep-0697.rst:379
msgid "The following new functions/values are proposed."
msgstr ""

#: ../pep-0697.rst:381
msgid "These will be added to the Limited API/Stable ABI:"
msgstr ""

#: ../pep-0697.rst:383
msgid "``void * PyObject_GetTypeData(PyObject *obj, PyTypeObject *cls)``"
msgstr ""

#: ../pep-0697.rst:384
msgid "``Py_ssize_t PyObject_GetTypeDataSize(PyTypeObject *cls)``"
msgstr ""

#: ../pep-0697.rst:385
msgid "``Py_tp_inherit_itemsize`` slot for ``PyType_Spec.slots``"
msgstr ""

#: ../pep-0697.rst:387
msgid "These will be added to the public C API only:"
msgstr ""

#: ../pep-0697.rst:389
msgid "``void *PyObject_GetItemData(PyObject *obj)``"
msgstr ""

#: ../pep-0697.rst:393
msgid "Backwards Compatibility"
msgstr ""

#: ../pep-0697.rst:395
msgid "No backwards compatibility concerns are known."
msgstr ""

#: ../pep-0697.rst:399
msgid "Assumptions"
msgstr ""

#: ../pep-0697.rst:401
msgid ""
"The implementation assumes that an instance's memory between ``type->tp_base-"
">tp_basicsize`` and ``type->tp_basicsize`` offsets “belongs” to ``type`` "
"(except variable-length types). This is not documented explicitly, but "
"CPython up to version 3.11 relied on it when adding ``__dict__`` to "
"subclasses, so it should be safe."
msgstr ""

#: ../pep-0697.rst:409
msgid "Security Implications"
msgstr ""

#: ../pep-0697.rst:411
msgid "None known."
msgstr ""

#: ../pep-0697.rst:415
msgid "Endorsements"
msgstr ""

#: ../pep-0697.rst:417
msgid ""
"XXX: The PEP mentions wrapper libraries, so it should get review/endorsement "
"from nanobind, PyO3, JPype, PySide &c."
msgstr ""

#: ../pep-0697.rst:420
msgid "XXX: HPy devs might also want to chime in."
msgstr ""

#: ../pep-0697.rst:424
msgid "How to Teach This"
msgstr ""

#: ../pep-0697.rst:426
msgid ""
"The initial implementation will include reference documentation and a What's "
"New entry, which should be enough for the target audience -- authors of C "
"extension libraries."
msgstr ""

#: ../pep-0697.rst:432
msgid "Reference Implementation"
msgstr ""

#: ../pep-0697.rst:434
msgid "XXX: Not quite ready yet"
msgstr ""

#: ../pep-0697.rst:438
msgid "Possible Future Enhancements"
msgstr ""

#: ../pep-0697.rst:441
msgid "Alignment"
msgstr ""

#: ../pep-0697.rst:443
msgid ""
"The proposed implementation may waste some space if instance structs need "
"smaller alignment than ``alignof(max_align_t)``. Also, dealing with "
"alignment makes the calculation slower than it could be if we could rely on "
"``base->tp_basicsize`` being properly aligned for the subtype."
msgstr ""

#: ../pep-0697.rst:449
msgid ""
"In other words, the proposed implementation focuses on safety and ease of "
"use, and trades space and time for it. If it turns out that this is a "
"problem, the implementation can be adjusted without breaking the API:"
msgstr ""

#: ../pep-0697.rst:454
msgid ""
"The offset to the type-specific buffer can be stored, so "
"``PyObject_GetTypeData`` effectively becomes ``(char *)obj + cls-"
">ht_typedataoffset``, possibly speeding things up at the cost of an extra "
"pointer in the class."
msgstr ""

#: ../pep-0697.rst:458
msgid ""
"Then, a new ``PyType_Slot`` can specify the desired alignment, to reduce "
"space requirements for instances."
msgstr ""

#: ../pep-0697.rst:460
msgid ""
"Alternatively, it might be possible to align ``tp_basicsize`` up at class "
"creation/readying time."
msgstr ""

#: ../pep-0697.rst:465
msgid "Rejected Ideas"
msgstr ""

#: ../pep-0697.rst:467
msgid "None yet."
msgstr ""

#: ../pep-0697.rst:471
msgid "Open Issues"
msgstr ""

#: ../pep-0697.rst:473
msgid ""
"Is negative basicsize the way to go? Should this be enabled by a flag "
"instead?"
msgstr ""

#: ../pep-0697.rst:477
msgid "Footnotes"
msgstr ""

#: ../pep-0697.rst:479
msgid ""
"This PEP does not make it “safe” to subclass NumPy arrays specifically. "
"NumPy publishes `an extensive list of caveats <https://numpy.org/doc/1.23/"
"user/basics.subclassing.html>`__ for subclassing its arrays from Python, and "
"extending in C might need a similar list."
msgstr ""

#: ../pep-0697.rst:486
msgid "Copyright"
msgstr ""

#: ../pep-0697.rst:488
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
