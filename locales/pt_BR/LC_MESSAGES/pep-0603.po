# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0603.rst
msgid "Author"
msgstr "Autor"

#: ../pep-0603.rst:5
msgid "Yury Selivanov <yury@edgedb.com>"
msgstr ""

#: ../pep-0603.rst
msgid "Discussions-To"
msgstr ""

#: ../pep-0603.rst:6
msgid ""
"https://discuss.python.org/t/pep-603-adding-a-frozenmap-type-to-"
"collections/2318/"
msgstr ""

#: ../pep-0603.rst
msgid "Status"
msgstr "Status"

#: ../pep-0603.rst:7
msgid "Draft"
msgstr ""

#: ../pep-0603.rst
msgid "Type"
msgstr "Tipo"

#: ../pep-0603.rst:8
msgid "Standards Track"
msgstr ""

#: ../pep-0603.rst
msgid "Created"
msgstr "Criada em"

#: ../pep-0603.rst:10 ../pep-0603.rst:11
msgid "12-Sep-2019"
msgstr ""

#: ../pep-0603.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../pep-0603.rst:15
msgid "Abstract"
msgstr ""

#: ../pep-0603.rst:17
msgid ""
"A *persistent data structure* is defined as a data structure that preserves "
"the previous version of the data when the data is modified. Such data "
"structures are effectively *immutable*, as operations on them do not update "
"the structure in-place, but instead always yield a new updated structure "
"(see [0]_ for more details.)"
msgstr ""

#: ../pep-0603.rst:23
msgid ""
"This PEP proposes to add a new fully persistent and immutable mapping type "
"called ``frozenmap`` to the ``collections`` module."
msgstr ""

#: ../pep-0603.rst:26
msgid ""
"The bulk of ``frozenmap``'s reference implementation is already used in "
"CPython to implement the ``contextvars`` module."
msgstr ""

#: ../pep-0603.rst:31
msgid "Rationale"
msgstr ""

#: ../pep-0603.rst:33
msgid ""
"Python has two immutable collection types: ``tuple`` and ``frozenset``.  "
"These types can be used to represent immutable lists and sets. However, a "
"way to represent immutable *mappings* does not yet exist, and this PEP "
"proposes a ``frozenmap`` to implement an immutable *mapping*."
msgstr ""

#: ../pep-0603.rst:39
msgid "The proposed ``frozenmap`` type:"
msgstr ""

#: ../pep-0603.rst:41
msgid "implements the ``collections.abc.Mapping`` protocol,"
msgstr ""

#: ../pep-0603.rst:42
msgid "supports pickling, and"
msgstr ""

#: ../pep-0603.rst:43
msgid "provides an API for efficient creation of \"modified\" versions."
msgstr ""

#: ../pep-0603.rst:45
msgid ""
"The following use cases illustrate why an immutable mapping is desirable:"
msgstr ""

#: ../pep-0603.rst:48
msgid ""
"Immutable mappings are hashable which allows their use as dictionary keys or "
"set elements."
msgstr ""

#: ../pep-0603.rst:51
msgid ""
"This hashable property permits functions decorated with ``@functools."
"lru_cache()`` to accept immutable mappings as arguments. Unlike an immutable "
"mapping, passing a plain ``dict`` to such a function results in error."
msgstr ""

#: ../pep-0603.rst:56
msgid ""
"Immutable mappings can hold complex state. Since immutable mappings can be "
"copied by reference, transactional mutation of state can be efficiently "
"implemented."
msgstr ""

#: ../pep-0603.rst:60
msgid ""
"Immutable mappings can be used to safely share dictionaries across thread "
"and asynchronous task boundaries. The immutability makes it easier to reason "
"about threads and asynchronous tasks."
msgstr ""

#: ../pep-0603.rst:64
msgid ""
"Lastly, CPython [1]_ already contains the main portion of the C code "
"required for the ``frozenmap`` implementation.  The C code already exists to "
"implement the ``contextvars`` module (see :pep:`567` for more details.) "
"Exposing this C code via a public collection type drastically increases the "
"number of users of the code.  This leads to increased code quality by "
"discovering bugs and improving performance which without a ``frozenmap`` "
"collection would be very challenging because most programs use the "
"``contextvars`` module indirectly."
msgstr ""

#: ../pep-0603.rst:75
msgid "Specification"
msgstr ""

#: ../pep-0603.rst:77
msgid ""
"A new public immutable type ``frozenmap`` is added to the ``collections`` "
"module."
msgstr ""

#: ../pep-0603.rst:81
msgid "Construction"
msgstr ""

#: ../pep-0603.rst:83
msgid "``frozenmap`` implements a ``dict``-like construction API:"
msgstr ""

#: ../pep-0603.rst:85
msgid "``frozenmap()`` creates a new empty immutable mapping;"
msgstr ""

#: ../pep-0603.rst:87
msgid ""
"``frozenmap(**kwargs)`` creates a mapping from ``**kwargs``, e.g. "
"``frozenmap(x=10, y=0, z=-1)``"
msgstr ""

#: ../pep-0603.rst:90
msgid ""
"``frozenmap(collection)`` creates a mapping from the passed ``collection`` "
"object. The passed ``collection`` object can be:"
msgstr ""

#: ../pep-0603.rst:93
msgid "a ``dict``,"
msgstr ""

#: ../pep-0603.rst:94
msgid "another ``frozenmap``,"
msgstr ""

#: ../pep-0603.rst:95
msgid ""
"an object with an ``items()`` method that is expected to return a series of "
"key/value tuples, or"
msgstr ""

#: ../pep-0603.rst:97
msgid "an iterable of key/value tuples."
msgstr ""

#: ../pep-0603.rst:100
msgid "Data Access"
msgstr ""

#: ../pep-0603.rst:102
msgid ""
"``frozenmap`` implements the ``collection.abc.Mapping`` protocol. Therefore, "
"getters, membership checks, and iteration work the same way that they would "
"for a ``dict``::"
msgstr ""

#: ../pep-0603.rst:123
msgid "Mutation"
msgstr ""

#: ../pep-0603.rst:125
msgid ""
"``frozenmap`` instances are immutable. That said, it is possible to "
"efficiently produce mutated *copies* of the immutable instance."
msgstr ""

#: ../pep-0603.rst:128
msgid ""
"The complexity of mutation operations is O(log N) and the resulting "
"``frozenmap`` copies often consume very little additional memory due to the "
"use of structural sharing (read [6]_ for more details.)"
msgstr ""

#: ../pep-0603.rst:133
msgid "frozenmap.including(key, value)"
msgstr ""

#: ../pep-0603.rst:135
msgid ""
"The method creates a new ``frozenmap`` copy with a new *key* / *value* pair::"
msgstr ""

#: ../pep-0603.rst:145
msgid "frozenmap.excluding(key)"
msgstr ""

#: ../pep-0603.rst:147
msgid ""
"The method produces a copy of the ``frozenmap`` which does not include a "
"deleted *key*::"
msgstr ""

#: ../pep-0603.rst:160
msgid "frozenmap.union(mapping=None, \\*\\*kw)"
msgstr ""

#: ../pep-0603.rst:162
msgid ""
"The method produces a copy of the ``frozenmap`` and adds or modifies "
"multiple key/values for the created copy.  The signature of the method "
"matches the signature of the ``frozenmap`` constructor::"
msgstr ""

#: ../pep-0603.rst:176
msgid ""
"Calling the ``union()`` method to add/replace N keys is more efficient than "
"calling the ``including()`` method N times."
msgstr ""

#: ../pep-0603.rst:180
msgid "frozenmap.mutating()"
msgstr ""

#: ../pep-0603.rst:182
msgid ""
"The method allows efficient copying of a ``frozenmap`` instance with "
"multiple modifications applied.  This method is especially useful when the "
"frozenmap in question contains thousands of key/value pairs and there's a "
"need to update many of them in a performance-critical section of the code."
msgstr ""

#: ../pep-0603.rst:188
msgid ""
"The ``frozenmap.mutating()`` method returns a mutable dict-like copy of the "
"``frozenmap`` object: an instance of ``collections.FrozenMapCopy``."
msgstr ""

#: ../pep-0603.rst:192
msgid "The ``FrozenMapCopy`` objects:"
msgstr ""

#: ../pep-0603.rst:194
msgid ""
"are copy-on-write views of the data of ``frozenmap`` instances they were "
"created from;"
msgstr ""

#: ../pep-0603.rst:197
msgid ""
"are mutable, although any mutations on them do not affect the ``frozenmap`` "
"instances they were created from;"
msgstr ""

#: ../pep-0603.rst:200
msgid ""
"can be passed to the ``frozenmap`` constructor; creating a frozenmap from a "
"``FrozenMapCopy`` object is an O(1) operation;"
msgstr ""

#: ../pep-0603.rst:204
msgid ""
"have O(log N) complexity for get/set operations; creating them is an O(1) "
"operation;"
msgstr ""

#: ../pep-0603.rst:207
msgid ""
"have a ``FrozenMapCopy.close()`` method that prevents any further access/"
"mutation of the data;"
msgstr ""

#: ../pep-0603.rst:210
msgid "can be used as a context manager."
msgstr ""

#: ../pep-0603.rst:212
msgid ""
"The below example illustrates how ``mutating()`` can be used with a context "
"manager::"
msgstr ""

#: ../pep-0603.rst:241
msgid "Iteration"
msgstr ""

#: ../pep-0603.rst:243
msgid ""
"As ``frozenmap`` implements the standard ``collections.abc.Mapping`` "
"protocol, so all expected methods of iteration are supported::"
msgstr ""

#: ../pep-0603.rst:251
msgid ""
"Iteration in ``frozenmap``, unlike in ``dict``, does not preserve the "
"insertion order."
msgstr ""

#: ../pep-0603.rst:255
msgid "Hashing"
msgstr ""

#: ../pep-0603.rst:257
msgid "``frozenmap`` instances can be hashable just like ``tuple`` objects::"
msgstr ""

#: ../pep-0603.rst:263
msgid "Typing"
msgstr ""

#: ../pep-0603.rst:265
msgid "It is possible to use the standard typing notation for frozenmaps::"
msgstr ""

#: ../pep-0603.rst:271 ../pep-0603.rst:359
msgid "Implementation"
msgstr ""

#: ../pep-0603.rst:273
msgid ""
"The proposed ``frozenmap`` immutable type uses a Hash Array Mapped Trie "
"(HAMT) data structure. Functional programming languages, like Clojure, use "
"HAMT to efficiently implement immutable hash tables, vectors, and sets."
msgstr ""

#: ../pep-0603.rst:279
msgid "HAMT"
msgstr ""

#: ../pep-0603.rst:281
msgid ""
"The key design contract of HAMT is the guarantee of a predictable *value* "
"when given the hash of a *key*. For a pair of *key* and *value*, the hash of "
"the *key* can be used to determine the location of *value* in the hash map "
"tree."
msgstr ""

#: ../pep-0603.rst:286
msgid ""
"Immutable mappings implemented with HAMT have O(log N) performance for "
"``set()`` and ``get()`` operations.  This efficiency is possible because "
"mutation operations only affect one branch of the tree, making it possible "
"to reuse non-mutated branches, and, therefore, avoiding copying of "
"unmodified data."
msgstr ""

#: ../pep-0603.rst:292
msgid ""
"Read more about HAMT in [5]_.  The CPython implementation [1]_ has a fairly "
"detailed description of the algorithm as well."
msgstr ""

#: ../pep-0603.rst:296
msgid "Performance"
msgstr ""

#: ../pep-0603.rst:303
msgid "Figure 1.  Benchmark code can be found here: [3]_."
msgstr ""

#: ../pep-0603.rst:305
msgid "The above chart demonstrates that:"
msgstr ""

#: ../pep-0603.rst:307
msgid ""
"``frozenmap`` implemented with HAMT displays near O(1) performance for all "
"benchmarked dictionary sizes."
msgstr ""

#: ../pep-0603.rst:310
msgid "``dict.copy()`` becomes less efficient when using around 100-200 items."
msgstr ""

#: ../pep-0603.rst:318
msgid "Figure 2.  Benchmark code can be found here: [4]_."
msgstr ""

#: ../pep-0603.rst:320
#, python-format
msgid ""
"Figure 2 compares the lookup costs of ``dict`` versus a HAMT-based immutable "
"mapping.  HAMT lookup time is ~30% slower than Python dict lookups on "
"average. This performance difference exists since traversing a shallow tree "
"is less efficient than lookup in a flat continuous array."
msgstr ""

#: ../pep-0603.rst:325
msgid ""
"Further to that, quoting [6]_: \"[using HAMT] means that in practice while "
"insertions, deletions, and lookups into a persistent hash array mapped trie "
"have a computational complexity of O(log n), for most applications they are "
"effectively constant time, as it would require an extremely large number of "
"entries to make any operation take more than a dozen steps.\""
msgstr ""

#: ../pep-0603.rst:334
msgid "Design Considerations"
msgstr ""

#: ../pep-0603.rst:337
msgid "Why \"frozenmap\" and not \"FrozenMap\""
msgstr ""

#: ../pep-0603.rst:339
msgid ""
"The lower-case \"frozenmap\" resonates well with the ``frozenset`` built-in "
"as well as with types like ``collections.defaultdict``."
msgstr ""

#: ../pep-0603.rst:344
msgid "Why \"frozenmap\" and not \"frozendict\""
msgstr ""

#: ../pep-0603.rst:346
msgid "\"Dict\" has a very specific meaning in Python:"
msgstr ""

#: ../pep-0603.rst:348
msgid ""
"a dict is a concrete implementation of ``abc.MutableMapping`` with O(1) get "
"and set operations (``frozenmap`` has O(log N) complexity);"
msgstr ""

#: ../pep-0603.rst:351
msgid "Python dicts preserve insertion order."
msgstr ""

#: ../pep-0603.rst:353
msgid ""
"The proposed ``frozenmap`` does not have these mentioned properties. "
"Instead, ``frozenmap`` has an O(log N) cost of set/get operations, and it "
"only implements the ``abc.Mapping`` protocol."
msgstr ""

#: ../pep-0603.rst:361
msgid ""
"The full implementation of the proposed ``frozenmap`` type is available at "
"[2]_.  The package includes C and pure Python implementations of the type."
msgstr ""

#: ../pep-0603.rst:365
msgid ""
"See also the HAMT collection implementation as part of the CPython project "
"tree here: [1]_."
msgstr ""

#: ../pep-0603.rst:370
msgid "References"
msgstr "Referências"

#: ../pep-0603.rst:372
msgid "https://en.wikipedia.org/wiki/Persistent_data_structure"
msgstr ""

#: ../pep-0603.rst:374
msgid "https://github.com/python/cpython/blob/3.8/Python/hamt.c"
msgstr ""

#: ../pep-0603.rst:376
msgid "https://github.com/MagicStack/immutables"
msgstr ""

#: ../pep-0603.rst:378
msgid "https://gist.github.com/1st1/be5a1c10aceb0775d0406e879cf87344"
msgstr ""

#: ../pep-0603.rst:380
msgid "https://gist.github.com/1st1/dbe27f2e14c30cce6f0b5fddfc8c437e"
msgstr ""

#: ../pep-0603.rst:382
msgid ""
"https://en.wikipedia.org/wiki/Hash_array_mapped_trie#cite_note-bagwell-1"
msgstr ""

#: ../pep-0603.rst:384
msgid "https://en.wikipedia.org/wiki/Persistent_data_structure#Trees"
msgstr ""

#: ../pep-0603.rst:388
msgid "Acknowledgments"
msgstr ""

#: ../pep-0603.rst:390
msgid ""
"I thank Carol Willing, Łukasz Langa, Larry Hastings, and Guido van Rossum "
"for their feedback, ideas, edits, and discussions around this PEP."
msgstr ""

#: ../pep-0603.rst:396
msgid "Copyright"
msgstr "Copyright"

#: ../pep-0603.rst:398
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
