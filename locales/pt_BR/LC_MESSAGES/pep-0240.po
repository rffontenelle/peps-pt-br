# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0240.txt
msgid "Author"
msgstr "Autor"

#: ../pep-0240.txt:3
msgid ""
"Christopher A. Craig <python-pep@ccraig.org>, Moshe Zadka <moshez@zadka.site."
"co.il>"
msgstr ""

#: ../pep-0240.txt
msgid "Status"
msgstr "Status"

#: ../pep-0240.txt:4
msgid "Rejected"
msgstr ""

#: ../pep-0240.txt
msgid "Type"
msgstr "Tipo"

#: ../pep-0240.txt:5
msgid "Standards Track"
msgstr ""

#: ../pep-0240.txt
msgid "Created"
msgstr "Criada em"

#: ../pep-0240.txt:7
msgid "11-Mar-2001"
msgstr ""

#: ../pep-0240.txt
msgid "Python-Version"
msgstr ""

#: ../pep-0240.txt:8
msgid "2.2"
msgstr ""

#: ../pep-0240.txt
msgid "Post-History"
msgstr "Pós-história"

#: ../pep-0240.txt:9
msgid "16-Mar-2001"
msgstr ""

#: ../pep-0240.txt:13
msgid "Abstract"
msgstr ""

#: ../pep-0240.txt:15
msgid ""
"A :pep:`different PEP <239>` suggests adding a builtin rational type to "
"Python.  This PEP suggests changing the ddd.ddd float literal to a rational "
"in Python, and modifying non-integer division to return it."
msgstr ""

#: ../pep-0240.txt:22
msgid "BDFL Pronouncement"
msgstr ""

#: ../pep-0240.txt:24
msgid ""
"This PEP is rejected.  The needs outlined in the rationale section have been "
"addressed to some extent by the acceptance of :pep:`327` for decimal "
"arithmetic.  Guido also noted, \"Rational arithmetic was the default 'exact' "
"arithmetic in ABC and it did not work out as expected\".  See the python-dev "
"discussion on 17 June 2005 [1]_."
msgstr ""

#: ../pep-0240.txt:32
msgid "Rationale"
msgstr ""

#: ../pep-0240.txt:34
msgid ""
"Rational numbers are useful for exact and unsurprising arithmetic. They give "
"the correct results people have been taught in various math classes.  Making "
"the \"obvious\" non-integer type one with more predictable semantics will "
"surprise new programmers less than using floating point numbers. As quite a "
"few posts on c.l.py and on tutor@python.org have shown, people often get bit "
"by strange semantics of floating point numbers: for example, ``round(0.98, "
"2)`` still gives 0.97999999999999998."
msgstr ""

#: ../pep-0240.txt:45
msgid "Proposal"
msgstr ""

#: ../pep-0240.txt:47
msgid ""
"Literals conforming to the regular expression ``'\\d*.\\d*'`` will be "
"rational numbers."
msgstr ""

#: ../pep-0240.txt:52
msgid "Backwards Compatibility"
msgstr ""

#: ../pep-0240.txt:54
msgid ""
"The only backwards compatible issue is the type of literals mentioned "
"above.  The following migration is suggested:"
msgstr ""

#: ../pep-0240.txt:57
msgid ""
"The next Python after approval will allow ``from __future__ import "
"rational_literals`` to cause all such literals to be treated as rational "
"numbers."
msgstr ""

#: ../pep-0240.txt:61
msgid ""
"Python 3.0 will have a warning, turned on by default, about such literals in "
"the absence of a ``__future__`` statement.  The warning message will contain "
"information about the ``__future__`` statement, and indicate that to get "
"floating point literals, they should be suffixed with \"e0\"."
msgstr ""

#: ../pep-0240.txt:67
msgid ""
"Python 3.1 will have the warning turned off by default.  This warning will "
"stay in place for 24 months, at which time the literals will be rationals "
"and the warning will be removed."
msgstr ""

#: ../pep-0240.txt:73
msgid "Common Objections"
msgstr ""

#: ../pep-0240.txt:75
msgid ""
"Rationals are slow and memory intensive! (Relax, I'm not taking floats away, "
"I'm just adding two more characters. ``1e0`` will still be a float)"
msgstr ""

#: ../pep-0240.txt:79
msgid ""
"Rationals must present themselves as a decimal float or they will be "
"horrible for users expecting decimals (i.e. ``str(.5)`` should return "
"``'.5'`` and not ``'1/2'``).  This means that many rationals must be "
"truncated at some point, which gives us a new loss of precision."
msgstr ""

#: ../pep-0240.txt:87
msgid "References"
msgstr "Referências"

#: ../pep-0240.txt:89
msgid ""
"Raymond Hettinger, Propose rejection of PEPs 239 and 240 -- a builtin "
"rational type and rational literals https://mail.python.org/pipermail/python-"
"dev/2005-June/054281.html"
msgstr ""

#: ../pep-0240.txt:95
msgid "Copyright"
msgstr "Copyright"

#: ../pep-0240.txt:97
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."
