# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-3141.txt
msgid "Author"
msgstr ""

#: ../pep-3141.txt:5
msgid "Jeffrey Yasskin <jyasskin@google.com>"
msgstr ""

#: ../pep-3141.txt
msgid "Status"
msgstr ""

#: ../pep-3141.txt:6
msgid "Final"
msgstr ""

#: ../pep-3141.txt
msgid "Type"
msgstr ""

#: ../pep-3141.txt:7
msgid "Standards Track"
msgstr ""

#: ../pep-3141.txt
msgid "Created"
msgstr ""

#: ../pep-3141.txt:9
msgid "23-Apr-2007"
msgstr ""

#: ../pep-3141.txt
msgid "Python-Version"
msgstr ""

#: ../pep-3141.txt:10
msgid "3.0"
msgstr ""

#: ../pep-3141.txt
msgid "Post-History"
msgstr ""

#: ../pep-3141.txt:11
msgid "25-Apr-2007, 16-May-2007, 02-Aug-2007"
msgstr ""

#: ../pep-3141.txt:15
msgid "Abstract"
msgstr ""

#: ../pep-3141.txt:17
msgid ""
"This proposal defines a hierarchy of Abstract Base Classes (ABCs) (PEP 3119) "
"to represent number-like classes. It proposes a hierarchy of ``Number :> "
"Complex :> Real :> Rational :> Integral`` where ``A :> B`` means \"A is a "
"supertype of B\". The hierarchy is inspired by Scheme's numeric tower "
"[#schemetower]_."
msgstr ""

#: ../pep-3141.txt:24
msgid "Rationale"
msgstr ""

#: ../pep-3141.txt:26
msgid ""
"Functions that take numbers as arguments should be able to determine the "
"properties of those numbers, and if and when overloading based on types is "
"added to the language, should be overloadable based on the types of the "
"arguments. For example, slicing requires its arguments to be ``Integrals``, "
"and the functions in the ``math`` module require their arguments to be "
"``Real``."
msgstr ""

#: ../pep-3141.txt:34
msgid "Specification"
msgstr ""

#: ../pep-3141.txt:36
msgid ""
"This PEP specifies a set of Abstract Base Classes, and suggests a general "
"strategy for implementing some of the methods. It uses terminology from :pep:"
"`3119`, but the hierarchy is intended to be meaningful for any systematic "
"method of defining sets of classes."
msgstr ""

#: ../pep-3141.txt:41
msgid ""
"The type checks in the standard library should use these classes instead of "
"the concrete built-ins."
msgstr ""

#: ../pep-3141.txt:46
msgid "Numeric Classes"
msgstr ""

#: ../pep-3141.txt:48
msgid ""
"We begin with a Number class to make it easy for people to be fuzzy about "
"what kind of number they expect. This class only helps with overloading; it "
"doesn't provide any operations. ::"
msgstr ""

#: ../pep-3141.txt:55
msgid ""
"Most implementations of complex numbers will be hashable, but if you need to "
"rely on that, you'll have to check it explicitly: mutable numbers are "
"supported by this hierarchy. ::"
msgstr ""

#: ../pep-3141.txt:159
msgid ""
"The ``Real`` ABC indicates that the value is on the real line, and supports "
"the operations of the ``float`` builtin. Real numbers are totally ordered "
"except for NaNs (which this PEP basically ignores). ::"
msgstr ""

#: ../pep-3141.txt:288
msgid ""
"We should clean up Demo/classes/Rat.py and promote it into rational.py in "
"the standard library. Then it will implement the Rational ABC. ::"
msgstr ""

#: ../pep-3141.txt:310
msgid "And finally integers::"
msgstr ""

#: ../pep-3141.txt:373
msgid "Changes to operations and __magic__ methods"
msgstr ""

#: ../pep-3141.txt:375
msgid ""
"To support more precise narrowing from float to int (and more generally, "
"from Real to Integral), we propose the following new __magic__ methods, to "
"be called from the corresponding library functions. All of these return "
"Integrals rather than Reals."
msgstr ""

#: ../pep-3141.txt:380
msgid ""
"``__trunc__(self)``, called from a new builtin ``trunc(x)``, which returns "
"the Integral closest to ``x`` between 0 and ``x``."
msgstr ""

#: ../pep-3141.txt:383
msgid ""
"``__floor__(self)``, called from ``math.floor(x)``, which returns the "
"greatest Integral ``<= x``."
msgstr ""

#: ../pep-3141.txt:386
msgid ""
"``__ceil__(self)``, called from ``math.ceil(x)``, which returns the least "
"Integral ``>= x``."
msgstr ""

#: ../pep-3141.txt:389
msgid ""
"``__round__(self)``, called from ``round(x)``, which returns the Integral "
"closest to ``x``, rounding half as the type chooses. ``float`` will change "
"in 3.0 to round half toward even. There is also a 2-argument version, "
"``__round__(self, ndigits)``, called from ``round(x, ndigits)``, which "
"should return a Real."
msgstr ""

#: ../pep-3141.txt:395
msgid ""
"In 2.6, ``math.floor``, ``math.ceil``, and ``round`` will continue to return "
"floats."
msgstr ""

#: ../pep-3141.txt:398
msgid ""
"The ``int()`` conversion implemented by ``float`` is equivalent to "
"``trunc()``.  In general, the ``int()`` conversion should try ``__int__()`` "
"first and if it is not found, try ``__trunc__()``."
msgstr ""

#: ../pep-3141.txt:402
msgid ""
"``complex.__{divmod,mod,floordiv,int,float}__`` also go away. It would be "
"nice to provide a nice error message to help confused porters, but not "
"appearing in ``help(complex)`` is more important."
msgstr ""

#: ../pep-3141.txt:408
msgid "Notes for type implementors"
msgstr ""

#: ../pep-3141.txt:410
msgid ""
"Implementors should be careful to make equal numbers equal and hash them to "
"the same values. This may be subtle if there are two different extensions of "
"the real numbers. For example, a complex type could reasonably implement "
"hash() as follows::"
msgstr ""

#: ../pep-3141.txt:418
msgid ""
"but should be careful of any values that fall outside of the built in "
"complex's range or precision."
msgstr ""

#: ../pep-3141.txt:422
msgid "Adding More Numeric ABCs"
msgstr ""

#: ../pep-3141.txt:424
msgid ""
"There are, of course, more possible ABCs for numbers, and this would be a "
"poor hierarchy if it precluded the possibility of adding those. You can add "
"``MyFoo`` between ``Complex`` and ``Real`` with::"
msgstr ""

#: ../pep-3141.txt:432
msgid "Implementing the arithmetic operations"
msgstr ""

#: ../pep-3141.txt:434
msgid ""
"We want to implement the arithmetic operations so that mixed-mode operations "
"either call an implementation whose author knew about the types of both "
"arguments, or convert both to the nearest built in type and do the operation "
"there. For subtypes of Integral, this means that __add__ and __radd__ should "
"be defined as::"
msgstr ""

#: ../pep-3141.txt:465
msgid ""
"There are 5 different cases for a mixed-type operation on subclasses of "
"Complex. I'll refer to all of the above code that doesn't refer to "
"MyIntegral and OtherTypeIKnowAbout as \"boilerplate\". ``a`` will be an "
"instance of ``A``, which is a subtype of ``Complex`` (``a : A <: Complex``), "
"and ``b : B <: Complex``. I'll consider ``a + b``:"
msgstr ""

#: ../pep-3141.txt:471
msgid "If A defines an __add__ which accepts b, all is well."
msgstr ""

#: ../pep-3141.txt:472
msgid ""
"If A falls back to the boilerplate code, and it were to return a value from "
"__add__, we'd miss the possibility that B defines a more intelligent "
"__radd__, so the boilerplate should return NotImplemented from __add__. (Or "
"A may not implement __add__ at all.)"
msgstr ""

#: ../pep-3141.txt:477
msgid "Then B's __radd__ gets a chance. If it accepts a, all is well."
msgstr ""

#: ../pep-3141.txt:478
msgid ""
"If it falls back to the boilerplate, there are no more possible methods to "
"try, so this is where the default implementation should live."
msgstr ""

#: ../pep-3141.txt:481
msgid ""
"If B <: A, Python tries B.__radd__ before A.__add__. This is ok, because it "
"was implemented with knowledge of A, so it can handle those instances before "
"delegating to Complex."
msgstr ""

#: ../pep-3141.txt:485
msgid ""
"If ``A<:Complex`` and ``B<:Real`` without sharing any other knowledge, then "
"the appropriate shared operation is the one involving the built in complex, "
"and both __radd__s land there, so ``a+b == b+a``."
msgstr ""

#: ../pep-3141.txt:491
msgid "Rejected Alternatives"
msgstr ""

#: ../pep-3141.txt:493
msgid ""
"The initial version of this PEP defined an algebraic hierarchy inspired by a "
"Haskell Numeric Prelude [#numericprelude]_ including MonoidUnderPlus, "
"AdditiveGroup, Ring, and Field, and mentioned several other possible "
"algebraic types before getting to the numbers. We had expected this to be "
"useful to people using vectors and matrices, but the NumPy community really "
"wasn't interested, and we ran into the issue that even if ``x`` is an "
"instance of ``X <: MonoidUnderPlus`` and ``y`` is an instance of ``Y <: "
"MonoidUnderPlus``, ``x + y`` may still not make sense."
msgstr ""

#: ../pep-3141.txt:503
msgid ""
"Then we gave the numbers a much more branching structure to include things "
"like the Gaussian Integers and Z/nZ, which could be Complex but wouldn't "
"necessarily support things like division. The community decided that this "
"was too much complication for Python, so I've now scaled back the proposal "
"to resemble the Scheme numeric tower much more closely."
msgstr ""

#: ../pep-3141.txt:512
msgid "The Decimal Type"
msgstr ""

#: ../pep-3141.txt:514
msgid ""
"After consultation with its authors it has been decided that the ``Decimal`` "
"type should not at this time be made part of the numeric tower."
msgstr ""

#: ../pep-3141.txt:520
msgid "References"
msgstr ""

#: ../pep-3141.txt:522
msgid ""
"Possible Python 3K Class Tree?, wiki page by Bill Janssen (http://wiki."
"python.org/moin/AbstractBaseClasses)"
msgstr ""

#: ../pep-3141.txt:525
msgid ""
"NumericPrelude: An experimental alternative hierarchy of numeric type "
"classes (https://archives.haskell.org/code.haskell.org/numeric-prelude/docs/"
"html/index.html)"
msgstr ""

#: ../pep-3141.txt:529
msgid ""
"The Scheme numerical tower (https://groups.csail.mit.edu/mac/ftpdir/scheme-"
"reports/r5rs-html/r5rs_8.html#SEC50)"
msgstr ""

#: ../pep-3141.txt:534
msgid "Acknowledgements"
msgstr ""

#: ../pep-3141.txt:536
msgid ""
"Thanks to Neal Norwitz for encouraging me to write this PEP in the first "
"place, to Travis Oliphant for pointing out that the numpy people didn't "
"really care about the algebraic concepts, to Alan Isaac for reminding me "
"that Scheme had already done this, and to Guido van Rossum and lots of other "
"people on the mailing list for refining the concept."
msgstr ""

#: ../pep-3141.txt:544
msgid "Copyright"
msgstr ""

#: ../pep-3141.txt:546
msgid "This document has been placed in the public domain."
msgstr ""
