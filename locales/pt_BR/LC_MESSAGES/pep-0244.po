# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0244.txt
msgid "Author"
msgstr "Autor"

#: ../pep-0244.txt:3
msgid "Martin von Löwis <martin@v.loewis.de>"
msgstr ""

#: ../pep-0244.txt
msgid "Status"
msgstr "Status"

#: ../pep-0244.txt:4
msgid "Rejected"
msgstr ""

#: ../pep-0244.txt
msgid "Type"
msgstr "Tipo"

#: ../pep-0244.txt:5
msgid "Standards Track"
msgstr ""

#: ../pep-0244.txt
msgid "Created"
msgstr "Criada em"

#: ../pep-0244.txt:7
msgid "20-Mar-2001"
msgstr ""

#: ../pep-0244.txt
msgid "Python-Version"
msgstr ""

#: ../pep-0244.txt:8
msgid "2.1"
msgstr ""

#: ../pep-0244.txt
msgid "Post-History"
msgstr "Pós-história"

#: ../pep-0244.txt:13
msgid "Motivation"
msgstr ""

#: ../pep-0244.txt:15
msgid ""
"From time to time, Python makes an incompatible change to the advertised "
"semantics of core language constructs, or changes their accidental "
"(implementation-dependent) behavior in some way.  While this is never done "
"capriciously, and is always done with the aim of improving the language over "
"the long term, over the short term it's contentious and disrupting."
msgstr ""

#: ../pep-0244.txt:22
msgid ""
":pep:`5`, Guidelines for Language Evolution suggests ways to ease the pain, "
"and this PEP introduces some machinery in support of that."
msgstr ""

#: ../pep-0244.txt:26
msgid ""
":pep:`227`, Statically Nested Scopes is the first application, and will be "
"used as an example here."
msgstr ""

#: ../pep-0244.txt:29
msgid ""
"When a new, potentially incompatible language feature is added, some modules "
"and libraries may chose to use it, while others may not.  This specification "
"introduces a syntax where a module author can denote whether a certain "
"language feature is used in the module or not."
msgstr ""

#: ../pep-0244.txt:35
msgid ""
"In discussion of this PEP, readers commented that there are two kinds of "
"\"settable\" language features:"
msgstr ""

#: ../pep-0244.txt:38
msgid ""
"those that are designed to eventually become the only option, at which time "
"specifying use of them is not necessary anymore.  The features for which the "
"syntax of the \"Back to the ``__future__``\" :pep:`236`, Back to the "
"``__future__`` was proposed fall into this category.  This PEP supports "
"declaring such features, and supports phasing out the \"old\" meaning of "
"constructs whose semantics has changed under the new feature.  However, it "
"defines no policy as to what features must be phased out eventually."
msgstr ""

#: ../pep-0244.txt:48
msgid ""
"those which are designed to stay optional forever, e.g. if they change some "
"default setting in the interpreter.  An example for such settings might be "
"the request to always emit line-number instructions for a certain module; no "
"specific flags of that kind are proposed in this specification."
msgstr ""

#: ../pep-0244.txt:54
msgid ""
"Since a primary goal of this PEP is to support new language constructs "
"without immediately breaking old libraries, special care was taken not to "
"break old libraries by introducing the new syntax."
msgstr ""

#: ../pep-0244.txt:61
msgid "Syntax"
msgstr ""

#: ../pep-0244.txt:63
msgid "A directive_statement is a statement of the form::"
msgstr ""

#: ../pep-0244.txt:67
msgid ""
"The name in the directive indicates the kind of the directive; it defines "
"whether the optional atom can be present, and whether there are further "
"syntactical or semantical restrictions to the atom.  In addition, depending "
"on the name of the directive, certain additional syntactical or semantical "
"restrictions may be placed on the directive (e.g. placement of the directive "
"in the module may be restricted to the top of the module)."
msgstr ""

#: ../pep-0244.txt:75
msgid ""
"In the directive_statement, ``directive`` is a new keyword. According to :"
"pep:`5`, this keyword is initially considered as a keyword only when used in "
"a directive statement, see \"Backwards Compatibility\" below."
msgstr ""

#: ../pep-0244.txt:82
msgid "Semantics"
msgstr ""

#: ../pep-0244.txt:84
msgid ""
"A directive statement instructs the Python interpreter to process a source "
"file in a different way; the specific details of that processing depend on "
"the directive name.  The optional atom is typically interpreted when the "
"source code is processed; details of that interpretation depend on the "
"directive."
msgstr ""

#: ../pep-0244.txt:92
msgid "Specific Directives: transitional"
msgstr ""

#: ../pep-0244.txt:94
msgid ""
"If a syntactical or semantical change is added to Python which is "
"incompatible, :pep:`5` mandates a transitional evolution of the language, "
"where the new feature is initially available alongside with the old one.  "
"Such a transition is possible by means of the transitional directive."
msgstr ""

#: ../pep-0244.txt:100
msgid ""
"In a transitional directive, the ``NAME`` is 'transitional'. The atom MUST "
"be present, and it MUST be a ``NAME``.  The possible values for that name "
"are defined when the language change is defined.  One example for such a "
"directive is::"
msgstr ""

#: ../pep-0244.txt:107
msgid ""
"The transitional directive MUST occur at before any other statement in a "
"module, except for the documentation string (i.e. it may appear as the "
"second statement of a module only if the first statement is a ``STRING+``)."
msgstr ""

#: ../pep-0244.txt:114
msgid "Backwards Compatibility"
msgstr ""

#: ../pep-0244.txt:116
msgid ""
"Introducing ``directive`` as a new keyword might cause incompatibilities "
"with existing code.  Following the guideline in :pep:`5`, in the initial "
"implementation of this specification, directive is a new keyword only if it "
"was used in a valid directive_statement (i.e. if it appeared as the first "
"non-string token in a module)."
msgstr ""

#: ../pep-0244.txt:125
msgid "Unresolved Problems:  directive as the first identifier"
msgstr ""

#: ../pep-0244.txt:127
msgid "Using directive in a module as::"
msgstr ""

#: ../pep-0244.txt:131
msgid ""
"(i.e. the name directive appears as the first thing in a module) will treat "
"it as keyword, not as identifier. It would be possible to classify it as a "
"``NAME`` with an additional look-ahead token, but such look-ahead is not "
"available in the Python tokenizer."
msgstr ""

#: ../pep-0244.txt:138
msgid "Questions and Answers"
msgstr ""

#: ../pep-0244.txt:140
msgid ""
"**Q:** It looks like this PEP was written to allow definition of source code "
"character sets.  Is that true?"
msgstr ""

#: ../pep-0244.txt:143
msgid ""
"**A:** No.  Even though the directive facility can be extended to allow "
"source code encodings, no specific directive is proposed."
msgstr ""

#: ../pep-0244.txt:146
msgid "**Q:** Then why was this PEP written at all?"
msgstr ""

#: ../pep-0244.txt:148
msgid ""
"**A:** It acts as a counter-proposal to :pep:`236`, which proposes to "
"overload the import statement with a new meaning.  This PEP allows to solve "
"the problem in a more general way."
msgstr ""

#: ../pep-0244.txt:152
msgid ""
"**Q:** But isn't mixing source encodings and language changes like mixing "
"apples and oranges?"
msgstr ""

#: ../pep-0244.txt:155
msgid ""
"**A:** Perhaps.  To address the difference, the predefined \"transitional\" "
"directive has been defined."
msgstr ""

#: ../pep-0244.txt:160
msgid "Copyright"
msgstr "Copyright"

#: ../pep-0244.txt:162
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."
