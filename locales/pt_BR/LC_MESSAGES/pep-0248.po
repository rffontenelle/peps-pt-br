# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0248.txt
msgid "Author"
msgstr ""

#: ../pep-0248.txt:3
msgid "Greg Stein <gstein@lyra.org>, Marc-Andr√© Lemburg <mal@lemburg.com>"
msgstr ""

#: ../pep-0248.txt
msgid "Discussions-To"
msgstr ""

#: ../pep-0248.txt:4
msgid "db-sig@python.org"
msgstr ""

#: ../pep-0248.txt
msgid "Status"
msgstr ""

#: ../pep-0248.txt:5
msgid "Final"
msgstr ""

#: ../pep-0248.txt
msgid "Type"
msgstr ""

#: ../pep-0248.txt:6
msgid "Informational"
msgstr ""

#: ../pep-0248.txt
msgid "Created"
msgstr ""

#: ../pep-0248.txt:8
msgid "08-May-1996"
msgstr ""

#: ../pep-0248.txt
msgid "Post-History"
msgstr ""

#: ../pep-0248.txt
msgid "Superseded-By"
msgstr ""

#: ../pep-0248.txt:10
msgid "249"
msgstr ""

#: ../pep-0248.txt:14
msgid "Introduction"
msgstr ""

#: ../pep-0248.txt:16
msgid ""
"This API has been defined to encourage similarity between the Python "
"modules that are used to access databases.  By doing this, we hope to "
"achieve a consistency leading to more easily understood modules, code "
"that is generally more portable across databases, and a broader reach of "
"database connectivity from Python."
msgstr ""

#: ../pep-0248.txt:22
msgid "This interface specification consists of several items:"
msgstr ""

#: ../pep-0248.txt:24 ../pep-0248.txt:38
msgid "Module Interface"
msgstr ""

#: ../pep-0248.txt:25 ../pep-0248.txt:54
msgid "Connection Objects"
msgstr ""

#: ../pep-0248.txt:26 ../pep-0248.txt:90
msgid "Cursor Objects"
msgstr ""

#: ../pep-0248.txt:27 ../pep-0248.txt:233
msgid "DBI Helper Objects"
msgstr ""

#: ../pep-0248.txt:29
msgid ""
"Comments and questions about this specification may be directed to the "
"SIG on Tabular Databases in Python (http://www.python.org/sigs/db-sig)."
msgstr ""

#: ../pep-0248.txt:33
msgid ""
"This specification document was last updated on: April 9, 1996. It will "
"be known as Version 1.0 of this specification."
msgstr ""

#: ../pep-0248.txt:40
msgid ""
"The database interface modules should typically be named with something "
"terminated by ``db``.  Existing examples are: ``oracledb``, "
"``informixdb``, and ``pg95db``.  These modules should export several "
"names:"
msgstr ""

#: ../pep-0248.txt:47
msgid "``modulename(connection_string)``"
msgstr ""

#: ../pep-0248.txt:46
msgid ""
"Constructor for creating a connection to the database. Returns a "
"Connection Object."
msgstr ""

#: ../pep-0248.txt:51
msgid "``error``"
msgstr ""

#: ../pep-0248.txt:50
msgid "Exception raised for errors from the database module."
msgstr ""

#: ../pep-0248.txt:56
msgid "Connection Objects should respond to the following methods:"
msgstr ""

#: ../pep-0248.txt:62 ../pep-0248.txt:131
msgid "``close()``"
msgstr ""

#: ../pep-0248.txt:59
msgid ""
"Close the connection now (rather than whenever ``__del__`` is called).  "
"The connection will be unusable from this point forward; an exception "
"will be raised if any operation is attempted with the connection."
msgstr ""

#: ../pep-0248.txt:65
msgid "``commit()``"
msgstr ""

#: ../pep-0248.txt:65
msgid "Commit any pending transaction to the database."
msgstr ""

#: ../pep-0248.txt:69
msgid "``rollback()``"
msgstr ""

#: ../pep-0248.txt:68
msgid "Roll the database back to the start of any pending transaction."
msgstr ""

#: ../pep-0248.txt:73
msgid "``cursor()``"
msgstr ""

#: ../pep-0248.txt:72
msgid ""
"Return a new Cursor Object.  An exception may be thrown if the database "
"does not support a cursor concept."
msgstr ""

#: ../pep-0248.txt:78
msgid "``callproc([params])``"
msgstr ""

#: ../pep-0248.txt:76
msgid ""
"(Note: this method is not well-defined yet.)  Call a stored database "
"procedure with the given (optional) parameters.  Returns the result of "
"the stored procedure."
msgstr ""

#: ../pep-0248.txt:87
msgid "(all Cursor Object attributes and methods)"
msgstr ""

#: ../pep-0248.txt:81
msgid ""
"For databases that do not have cursors and for simple applications that "
"do not require the complexity of a cursor, a Connection Object should "
"respond to each of the attributes and methods of the Cursor Object.  "
"Databases that have cursor can implement this by using an implicit, "
"internal cursor."
msgstr ""

#: ../pep-0248.txt:92
msgid ""
"These objects represent a database cursor, which is used to manage the "
"context of a fetch operation."
msgstr ""

#: ../pep-0248.txt:95
msgid "Cursor Objects should respond to the following methods and attributes:"
msgstr ""

#: ../pep-0248.txt:109
msgid "``arraysize``"
msgstr ""

#: ../pep-0248.txt:99
msgid ""
"This read/write attribute specifies the number of rows to fetch at a time"
" with ``fetchmany()``.  This value is also used when inserting multiple "
"rows at a time (passing a tuple/list of tuples/lists as the params value "
"to ``execute()``).  This attribute will default to a single row."
msgstr ""

#: ../pep-0248.txt:105
msgid ""
"Note that the arraysize is optional and is merely provided for higher "
"performance database interactions. Implementations should observe it with"
" respect to the ``fetchmany()`` method, but are free to interact with the"
" database a single row at a time."
msgstr ""

#: ../pep-0248.txt:125
msgid "``description``"
msgstr ""

#: ../pep-0248.txt:112
msgid ""
"This read-only attribute is a tuple of 7-tuples.  Each 7-tuple contains "
"information describing each result column: (name, type_code, "
"display_size, internal_size, precision, scale, null_ok). This attribute "
"will be ``None`` for operations that do not return rows or if the cursor "
"has not had an operation invoked via the ``execute()`` method yet."
msgstr ""

#: ../pep-0248.txt:120
msgid "The 'type_code' is one of the 'dbi' values specified in the section below."
msgstr ""

#: ../pep-0248.txt:123
msgid ""
"Note: this is a bit in flux. Generally, the first two items of the "
"7-tuple will always be present; the others may be database specific."
msgstr ""

#: ../pep-0248.txt:128
msgid ""
"Close the cursor now (rather than whenever ``__del__`` is called).  The "
"cursor will be unusable from this point forward; an exception will be "
"raised if any operation is attempted with the cursor."
msgstr ""

#: ../pep-0248.txt:170
msgid "``execute(operation [,params])``"
msgstr ""

#: ../pep-0248.txt:134
msgid ""
"Execute (prepare) a database operation (query or command). Parameters may"
" be provided (as a sequence (e.g. tuple/list)) and will be bound to "
"variables in the operation.  Variables are specified in a database-"
"specific notation that is based on the index in the parameter tuple "
"(position-based rather than name-based)."
msgstr ""

#: ../pep-0248.txt:141
msgid ""
"The parameters may also be specified as a sequence of sequences (e.g. a "
"list of tuples) to insert multiple rows in a single operation."
msgstr ""

#: ../pep-0248.txt:145
msgid ""
"A reference to the operation will be retained by the cursor.  If the same"
" operation object is passed in again, then the cursor can optimize its "
"behavior.  This is most effective for algorithms where the same operation"
" is used, but different parameters are bound to it (many times)."
msgstr ""

#: ../pep-0248.txt:151
msgid ""
"For maximum efficiency when reusing an operation, it is best to use the "
"``setinputsizes()`` method to specify the parameter types and sizes ahead"
" of time.  It is legal for a parameter to not match the predefined "
"information; the implementation should compensate, possibly with a loss "
"of efficiency."
msgstr ""

#: ../pep-0248.txt:158
msgid ""
"Using SQL terminology, these are the possible result values from the "
"``execute()`` method:"
msgstr ""

#: ../pep-0248.txt:161
msgid "If the statement is DDL (e.g. ``CREATE TABLE``), then 1 is returned."
msgstr ""

#: ../pep-0248.txt:164
msgid ""
"If the statement is DML (e.g. ``UPDATE`` or ``INSERT``), then the number "
"of rows affected is returned (0 or a positive integer)."
msgstr ""

#: ../pep-0248.txt:168
msgid ""
"If the statement is DQL (e.g. ``SELECT``), ``None`` is returned, "
"indicating that the statement is not really complete until you use one of"
" the  'fetch' methods."
msgstr ""

#: ../pep-0248.txt:174
msgid "``fetchone()``"
msgstr ""

#: ../pep-0248.txt:173
msgid "Fetch the next row of a query result, returning a single tuple."
msgstr ""

#: ../pep-0248.txt:188
msgid "``fetchmany([size])``"
msgstr ""

#: ../pep-0248.txt:177
msgid ""
"Fetch the next set of rows of a query result, returning as a list of "
"tuples. An empty list is returned when no more rows are available. The "
"number of rows to fetch is specified by the parameter.  If it is "
"``None``, then the cursor's arraysize determines the number of rows to be"
" fetched."
msgstr ""

#: ../pep-0248.txt:184
msgid ""
"Note there are performance considerations involved with the size "
"parameter.  For optimal performance, it is usually best to use the "
"arraysize attribute.  If the size parameter is used, then it is best for "
"it to retain the same value from one ``fetchmany()`` call to the next."
msgstr ""

#: ../pep-0248.txt:193
msgid "``fetchall()``"
msgstr ""

#: ../pep-0248.txt:191
msgid ""
"Fetch all rows of a query result, returning as a list of tuples.  Note "
"that the cursor's arraysize attribute can affect the performance of this "
"operation."
msgstr ""

#: ../pep-0248.txt:213
msgid "``setinputsizes(sizes)``"
msgstr ""

#: ../pep-0248.txt:196
msgid ""
"(Note: this method is not well-defined yet.)  This can be used before a "
"call to ``execute()`` to predefine memory areas for the operation's "
"parameters.  sizes is specified as a tuple -- one item for each input "
"parameter.  The item should be a Type object that corresponds to the "
"input that will be used, or it should be an integer specifying the "
"maximum length of a string parameter.  If the item is ``None``, then no "
"predefined memory area will be reserved for that column (this is useful "
"to avoid predefined areas for large inputs)."
msgstr ""

#: ../pep-0248.txt:207 ../pep-0248.txt:223
msgid "This method would be used before the ``execute()`` method is invoked."
msgstr ""

#: ../pep-0248.txt:210 ../pep-0248.txt:226
msgid ""
"Note that this method is optional and is merely provided for higher "
"performance database interaction. Implementations are free to do nothing "
"and users are free to not use it."
msgstr ""

#: ../pep-0248.txt:230
msgid "``setoutputsize(size [,col])``"
msgstr ""

#: ../pep-0248.txt:216
msgid "(Note: this method is not well-defined yet.)"
msgstr ""

#: ../pep-0248.txt:218
msgid ""
"Set a column buffer size for fetches of large columns (e.g. LONG).  The "
"column is specified as an index into the result tuple.  Using a column of"
" ``None`` will set the default size for all large columns in the cursor."
msgstr ""

#: ../pep-0248.txt:235
msgid ""
"Many databases need to have the input in a particular format for binding "
"to an operation's input parameters.  For example, if an input is destined"
" for a ``DATE`` column, then it must be bound to the database in a "
"particular string format.  Similar problems exist for \"Row ID\" columns "
"or large binary items (e.g. blobs or ``RAW`` columns).  This presents "
"problems for Python since the parameters to the ``execute()`` method are "
"untyped.  When the database module sees a Python string object, it "
"doesn't know if it should be bound as a simple CHAR column, as a raw "
"binary item, or as a ``DATE``."
msgstr ""

#: ../pep-0248.txt:245
msgid ""
"To overcome this problem, the 'dbi' module was created.  This module "
"specifies some basic database interface types for working with databases."
"  There are two classes: 'dbiDate' and 'dbiRaw'. These are simple "
"container classes that wrap up a value.  When passed to the database "
"modules, the module can then detect that the input parameter is intended "
"as a ``DATE`` or a ``RAW``.  For symmetry, the database modules will "
"return ``DATE`` and ``RAW`` columns as instances of these classes."
msgstr ""

#: ../pep-0248.txt:254
msgid ""
"A Cursor Object's 'description' attribute returns information about each "
"of the result columns of a query.  The 'type_code' is defined to be one "
"of five types exported by this module: ``STRING``, ``RAW``, ``NUMBER``, "
"``DATE``, or ``ROWID``."
msgstr ""

#: ../pep-0248.txt:259
msgid "The module exports the following names:"
msgstr ""

#: ../pep-0248.txt:264
msgid "``dbiDate(value)``"
msgstr ""

#: ../pep-0248.txt:262
msgid ""
"This function constructs a 'dbiDate' instance that holds a date value.  "
"The value should be specified as an integer number of seconds since the "
"\"epoch\" (e.g. ``time.time()``)."
msgstr ""

#: ../pep-0248.txt:269
msgid "``dbiRaw(value)``"
msgstr ""

#: ../pep-0248.txt:267
msgid ""
"This function constructs a 'dbiRaw' instance that holds a raw (binary) "
"value.  The value should be specified as a Python string."
msgstr ""

#: ../pep-0248.txt:273
msgid "``STRING``"
msgstr ""

#: ../pep-0248.txt:272
msgid ""
"This object is used to describe columns in a database that are string-"
"based (e.g. CHAR)."
msgstr ""

#: ../pep-0248.txt:277
msgid "``RAW``"
msgstr ""

#: ../pep-0248.txt:276
msgid ""
"This object is used to describe (large) binary columns in a database "
"(e.g. LONG RAW, blobs)."
msgstr ""

#: ../pep-0248.txt:281
msgid "``NUMBER``"
msgstr ""

#: ../pep-0248.txt:280
msgid "This object is used to describe numeric columns in a database."
msgstr ""

#: ../pep-0248.txt:285
msgid "``DATE``"
msgstr ""

#: ../pep-0248.txt:284
msgid "This object is used to describe date columns in a database."
msgstr ""

#: ../pep-0248.txt:290
msgid "``ROWID``"
msgstr ""

#: ../pep-0248.txt:288
msgid "This object is used to describe the \"Row ID\" column in a database."
msgstr ""

#: ../pep-0248.txt:293
msgid "Acknowledgements"
msgstr ""

#: ../pep-0248.txt:295
msgid ""
"Many thanks go to Andrew Kuchling who converted the Python Database API "
"Specification 1.0 from the original HTML format into the PEP format in "
"2001."
msgstr ""

#: ../pep-0248.txt:299
msgid ""
"Greg Stein is the original author of the Python Database API "
"Specification 1.0. Marc-Andr√© later continued maintenance of the API as "
"an editor."
msgstr ""

#: ../pep-0248.txt:304
msgid "Copyright"
msgstr ""

#: ../pep-0248.txt:306
msgid "This document has been placed in the Public Domain."
msgstr ""

