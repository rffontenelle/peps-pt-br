# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0242.txt
msgid "Author"
msgstr "Autor"

#: ../pep-0242.txt:3
msgid "Paul F. Dubois <paul@pfdubois.com>"
msgstr ""

#: ../pep-0242.txt
msgid "Status"
msgstr "Status"

#: ../pep-0242.txt:4
msgid "Rejected"
msgstr ""

#: ../pep-0242.txt
msgid "Type"
msgstr "Tipo"

#: ../pep-0242.txt:5
msgid "Standards Track"
msgstr ""

#: ../pep-0242.txt
msgid "Created"
msgstr "Criada em"

#: ../pep-0242.txt:7
msgid "17-Mar-2001"
msgstr ""

#: ../pep-0242.txt
msgid "Python-Version"
msgstr ""

#: ../pep-0242.txt:8
msgid "2.2"
msgstr ""

#: ../pep-0242.txt
msgid "Post-History"
msgstr "Pós-história"

#: ../pep-0242.txt:9
msgid "17-Apr-2001"
msgstr ""

#: ../pep-0242.txt:13
msgid "Abstract"
msgstr ""

#: ../pep-0242.txt:15
msgid ""
"This proposal gives the user optional control over the precision and range "
"of numeric computations so that a computation can be written once and run "
"anywhere with at least the desired precision and range.  It is backward "
"compatible with existing code.  The meaning of decimal literals is clarified."
msgstr ""

#: ../pep-0242.txt:23
msgid "Rationale"
msgstr ""

#: ../pep-0242.txt:25
msgid ""
"Currently it is impossible in every language except Fortran 90 to write a "
"program in a portable way that uses floating point and gets roughly the same "
"answer regardless of platform -- or refuses to compile if that is not "
"possible.  Python currently has only one floating point type, equal to a C "
"double in the C implementation."
msgstr ""

#: ../pep-0242.txt:31
msgid ""
"No type exists corresponding to single or quad floats.  It would complicate "
"the language to try to introduce such types directly and their subsequent "
"use would not be portable.  This proposal is similar to the Fortran 90 "
"\"kind\" solution, adapted to the Python environment.  With this facility an "
"entire calculation can be switched from one level of precision to another by "
"changing a single line.  If the desired precision does not exist on a "
"particular machine, the program will fail rather than get the wrong answer.  "
"Since coding in this style would involve an early call to the routine that "
"will fail, this is the next best thing to not compiling."
msgstr ""

#: ../pep-0242.txt:45
msgid "Supported Kinds of Ints and Floats"
msgstr ""

#: ../pep-0242.txt:47
msgid ""
"Complex numbers are treated separately below, since Python can be built "
"without them."
msgstr ""

#: ../pep-0242.txt:50
msgid ""
"Each Python compiler may define as many \"kinds\" of integer and floating "
"point numbers as it likes, except that it must support at least two kinds of "
"integer corresponding to the existing int and long, and must support at "
"least one kind of floating point number, equivalent to the present float."
msgstr ""

#: ../pep-0242.txt:56
msgid ""
"The range and precision of these required kinds are processor dependent, as "
"at present, except for the \"long integer\" kind, which can hold an "
"arbitrary integer."
msgstr ""

#: ../pep-0242.txt:60
msgid ""
"The built-in functions ``int()``, ``long()``, and ``float()`` convert inputs "
"to these default kinds as they do at present.  (Note that a Unicode string "
"is actually a different \"kind\" of string and that a sufficiently "
"knowledgeable person might be able to expand this PEP to cover that case.)"
msgstr ""

#: ../pep-0242.txt:66
msgid ""
"Within each type (integer, floating) the compiler supports a linearly-"
"ordered set of kinds, with the ordering determined by the ability to hold "
"numbers of an increased range and/or precision."
msgstr ""

#: ../pep-0242.txt:72
msgid "Kind Objects"
msgstr ""

#: ../pep-0242.txt:74
msgid ""
"Two new standard functions are defined in a module named \"kinds\". They "
"return callable objects called kind objects.  Each int or floating kind "
"object f has the signature ``result = f(x)``, and each complex kind object "
"has the signature ``result = f(x, y=0.)``."
msgstr ""

#: ../pep-0242.txt:84
msgid "``int_kind(n)``"
msgstr ""

#: ../pep-0242.txt:80
msgid ""
"For an integer argument ``n >= 1``, return a callable object whose result is "
"an integer kind that will hold an integer number in the open interval "
"(``-10**n``, ``10**n``).  The kind object accepts arguments that are "
"integers including longs.  If ``n == 0``, returns the kind object "
"corresponding to the Python literal 0."
msgstr ""

#: ../pep-0242.txt:94
msgid "``float_kind(nd, n)``"
msgstr ""

#: ../pep-0242.txt:87
msgid ""
"For ``nd >= 0`` and ``n >= 1``, return a callable object whose result is a "
"floating point kind that will hold a floating-point number with at least nd "
"digits of precision and a base-10 exponent in the closed interval ``[-n, "
"n]``.  The kind object accepts arguments that are integer or float."
msgstr ""

#: ../pep-0242.txt:93
msgid ""
"If nd and n are both zero, returns the kind object corresponding to the "
"Python literal 0.0."
msgstr ""

#: ../pep-0242.txt:96
msgid ""
"The compiler will return a kind object corresponding to the least of its "
"available set of kinds for that type that has the desired properties.  If no "
"kind with the desired qualities exists in a given implementation an "
"``OverflowError`` exception is thrown.  A kind function converts its "
"argument to the target kind, but if the result does not fit in the target "
"kind's range, an ``OverflowError`` exception is thrown."
msgstr ""

#: ../pep-0242.txt:104
msgid ""
"Besides their callable behavior, kind objects have attributes giving the "
"traits of the kind in question."
msgstr ""

#: ../pep-0242.txt:107
msgid ""
"``name`` is the name of the kind.  The standard kinds are called int, long, "
"double."
msgstr ""

#: ../pep-0242.txt:110
msgid ""
"``typecode`` is a single-letter string that would be appropriate for use "
"with ``Numeric`` or module ``array`` to form an array of this kind.  The "
"standard types' typecodes are 'i', 'O', 'd' respectively."
msgstr ""

#: ../pep-0242.txt:115
msgid ""
"Integer kinds have these additional attributes: ``MAX``, equal to the "
"maximum permissible integer of this kind, or ``None`` for the long kind. "
"``MIN``, equal to the most negative permissible integer of this kind, or "
"``None`` for the long kind."
msgstr ""

#: ../pep-0242.txt:120
msgid ""
"Float kinds have these additional attributes whose properties are equal to "
"the corresponding value for the corresponding C type in the standard header "
"file \"float.h\".  ``MAX``, ``MIN``, ``DIG``, ``MANT_DIG``, ``EPSILON``, "
"``MAX_EXP``, ``MAX_10_EXP``, ``MIN_EXP``, ``MIN_10_EXP``, ``RADIX``, "
"``ROUNDS`` (== ``FLT_RADIX``, ``FLT_ROUNDS`` in float.h).  These values are "
"of type integer except for ``MAX``, ``MIN``, and ``EPSILON``, which are of "
"the Python floating type to which the kind corresponds."
msgstr ""

#: ../pep-0242.txt:132
msgid "Attributes of Module kinds"
msgstr ""

#: ../pep-0242.txt:134
msgid ""
"``int_kinds`` is a list of the available integer kinds, sorted from lowest "
"to highest kind.  By definition, ``int_kinds[-1]`` is the long kind."
msgstr ""

#: ../pep-0242.txt:137
msgid ""
"``float_kinds`` is a list of the available floating point kinds, sorted from "
"lowest to highest kind."
msgstr ""

#: ../pep-0242.txt:140
msgid ""
"``default_int_kind`` is the kind object corresponding to the Python literal 0"
msgstr ""

#: ../pep-0242.txt:143
msgid ""
"``default_long_kind`` is the kind object corresponding to the Python literal "
"0L"
msgstr ""

#: ../pep-0242.txt:146
msgid ""
"``default_float_kind`` is the kind object corresponding to the Python "
"literal 0.0"
msgstr ""

#: ../pep-0242.txt:151
msgid "Complex Numbers"
msgstr ""

#: ../pep-0242.txt:153
msgid ""
"If supported, complex numbers have real and imaginary parts that are "
"floating-point numbers with the same kind.  A Python compiler must support a "
"complex analog of each floating point kind it supports, if it supports "
"complex numbers at all."
msgstr ""

#: ../pep-0242.txt:158
msgid ""
"If complex numbers are supported, the following are available in module "
"kinds:"
msgstr ""

#: ../pep-0242.txt:166
msgid "``complex_kind(nd, n)``"
msgstr ""

#: ../pep-0242.txt:162
msgid ""
"Return a callable object whose result is a complex kind that will hold a "
"complex number each of whose components (.real, .imag) is of kind "
"``float_kind(nd, n)``.  The kind object will accept one argument that is of "
"any integer, real, or complex kind, or two arguments, each integer or real."
msgstr ""

#: ../pep-0242.txt:168
msgid ""
"``complex_kinds`` is a list of the available complex kinds, sorted from "
"lowest to highest kind."
msgstr ""

#: ../pep-0242.txt:171
msgid ""
"``default_complex_kind`` is the kind object corresponding to the Python "
"literal 0.0j.  The name of this kind is doublecomplex, and its typecode is "
"'D'."
msgstr ""

#: ../pep-0242.txt:175
msgid "Complex kind objects have these addition attributes:"
msgstr ""

#: ../pep-0242.txt:177
msgid "``floatkind`` is the kind object of the corresponding float type."
msgstr ""

#: ../pep-0242.txt:181
msgid "Examples"
msgstr ""

#: ../pep-0242.txt:183
msgid "In module myprecision.py::"
msgstr ""

#: ../pep-0242.txt:191
msgid "In the rest of my code::"
msgstr ""

#: ../pep-0242.txt:205
msgid ""
"Note how that entire code can then be changed to a higher precision by "
"changing the arguments in myprecision.py."
msgstr ""

#: ../pep-0242.txt:208
msgid ""
"Comment: note that you aren't promised that single != double; but you are "
"promised that ``double(1.e20)`` will hold a number with 15 decimal digits of "
"precision and a range up to ``10**300`` or that the ``float_kind`` call will "
"fail."
msgstr ""

#: ../pep-0242.txt:215
msgid "Open Issues"
msgstr ""

#: ../pep-0242.txt:217
msgid "No open issues have been raised at this time."
msgstr ""

#: ../pep-0242.txt:221
msgid "Rejection"
msgstr ""

#: ../pep-0242.txt:223
msgid ""
"This PEP has been closed by the author.  The kinds module will not be added "
"to the standard library."
msgstr ""

#: ../pep-0242.txt:226
msgid ""
"There was no opposition to the proposal but only mild interest in using it, "
"not enough to justify adding the module to the standard library.  Instead, "
"it will be made available as a separate distribution item at the Numerical "
"Python site.  At the next release of Numerical Python, it will no longer be "
"a part of the Numeric distribution."
msgstr ""

#: ../pep-0242.txt:235
msgid "Copyright"
msgstr "Copyright"

#: ../pep-0242.txt:237
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."
