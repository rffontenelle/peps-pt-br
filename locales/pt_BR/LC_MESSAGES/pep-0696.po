# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0696.rst
msgid "Author"
msgstr ""

#: ../pep-0696.rst:3
msgid "James Hilton-Balfe <gobot1234yt@gmail.com>"
msgstr ""

#: ../pep-0696.rst
msgid "Sponsor"
msgstr ""

#: ../pep-0696.rst:4
msgid "Jelle Zijlstra <jelle.zijlstra@gmail.com>"
msgstr ""

#: ../pep-0696.rst
msgid "Discussions-To"
msgstr ""

#: ../pep-0696.rst:5
msgid "typing-sig@python.org"
msgstr ""

#: ../pep-0696.rst
msgid "Status"
msgstr ""

#: ../pep-0696.rst:6
msgid "Draft"
msgstr ""

#: ../pep-0696.rst
msgid "Type"
msgstr ""

#: ../pep-0696.rst:7
msgid "Standards Track"
msgstr ""

#: ../pep-0696.rst
msgid "Topic"
msgstr ""

#: ../pep-0696.rst:8
msgid "Typing"
msgstr ""

#: ../pep-0696.rst
msgid "Created"
msgstr ""

#: ../pep-0696.rst:10
msgid "14-Jul-2022"
msgstr ""

#: ../pep-0696.rst
msgid "Python-Version"
msgstr ""

#: ../pep-0696.rst:11
msgid "3.12"
msgstr ""

#: ../pep-0696.rst:14
msgid "Abstract"
msgstr ""

#: ../pep-0696.rst:16
msgid ""
"This PEP introduces the concept of type defaults for ``TypeVarLike``\\ s "
"(``TypeVar``, ``ParamSpec`` and ``TypeVarTuple``), which act as defaults for "
"a type parameter when one is not specified or the constraint solver isn't "
"able to solve a type parameter to anything."
msgstr ""

#: ../pep-0696.rst:21
msgid ""
"Default type argument support is available in some popular languages such as "
"C++, TypeScript, and Rust. A survey of type parameter syntax in some common "
"languages has been conducted by the author of :pep:`695` and can be found in "
"its :pep:`Appendix A <695#appendix-a-survey-of-type-parameter-syntax>`."
msgstr ""

#: ../pep-0696.rst:29
msgid "Motivation"
msgstr ""

#: ../pep-0696.rst:42
msgid ""
"One place this `regularly comes up <https://github.com/python/typing/"
"issues/975>`__ is ``Generator``. I propose changing the *stub definition* to "
"something like:"
msgstr ""

#: ../pep-0696.rst:56
msgid "This is also useful for a ``Generic`` that is commonly over one type."
msgstr ""

#: ../pep-0696.rst:72
msgid ""
"Not only does this improve typing for those who explicitly use it, it also "
"helps non-typing users who rely on auto-complete to speed up their "
"development."
msgstr ""

#: ../pep-0696.rst:85
msgid "This design pattern is common in projects like:"
msgstr ""

#: ../pep-0696.rst:77
msgid ""
"`discord.py <https://github.com/Rapptz/discord.py>`__ — where the example "
"above was taken from."
msgstr ""

#: ../pep-0696.rst:79
msgid ""
"`NumPy <https://github.com/numpy/numpy>`__ — the default for types like "
"``ndarray``'s ``dtype`` would be ``float64``. Currently it's ``Unknown`` or "
"``Any``."
msgstr ""

#: ../pep-0696.rst:82
msgid ""
"`TensorFlow <https://github.com/tensorflow/tensorflow>`__ — this could be "
"used for Tensor similarly to ``numpy.ndarray`` and would be useful to "
"simplify the definition of ``Layer``."
msgstr ""

#: ../pep-0696.rst:88
msgid "Specification"
msgstr ""

#: ../pep-0696.rst:91
msgid "Default Ordering and Subscription Rules"
msgstr ""

#: ../pep-0696.rst:93
msgid ""
"The order for defaults should follow the standard function parameter rules, "
"so a ``TypeVarLike`` with no ``default`` cannot follow one with a "
"``default`` value. Doing so should ideally raise a ``TypeError`` in ``typing."
"_GenericAlias``/``types.GenericAlias``, and a type checker should flag this "
"an error."
msgstr ""

#: ../pep-0696.rst:134
msgid ""
"This cannot be enforced at runtime for functions, for now, but in the "
"future, this might be possible (see `Interaction with PEP 695 <#interaction-"
"with-pep-695>`__)."
msgstr ""

#: ../pep-0696.rst:139
msgid "``ParamSpec`` Defaults"
msgstr ""

#: ../pep-0696.rst:141
msgid ""
"``ParamSpec`` defaults are defined using the same syntax as ``TypeVar`` \\ s "
"but use a ``list`` or ``tuple`` of types or an ellipsis literal \"``...``\" "
"or another in-scope ``ParamSpec`` (see :ref:`scoping-rules`)."
msgstr ""

#: ../pep-0696.rst:155
msgid "``TypeVarTuple`` Defaults"
msgstr ""

#: ../pep-0696.rst:157
msgid ""
"``TypeVarTuple`` defaults are defined using the same syntax as ``TypeVar`` "
"\\ s but use an unpacked tuple of types instead of a single type or another "
"in-scope ``TypeVarTuple`` (see :ref:`scoping-rules`)."
msgstr ""

#: ../pep-0696.rst:171
msgid "Using Another ``TypeVarLike`` as ``default``"
msgstr ""

#: ../pep-0696.rst:173
msgid ""
"This allows for a value to be used again when the constraints solver fails "
"to solve a constraint for a type, or the type parameter to a generic is "
"missing but another type parameter is specified."
msgstr ""

#: ../pep-0696.rst:177
msgid ""
"To use another ``TypeVarLike`` as a default the ``default`` and the "
"``TypeVarLike`` must be the same type (a ``TypeVar``'s default must be a "
"``TypeVar``, etc.)."
msgstr ""

#: ../pep-0696.rst:181
msgid ""
"`This could be used on builtins.slice <https://github.com/python/typing/"
"issues/159>`__ where the ``start`` parameter should default to ``int``, "
"``stop`` default to the type of ``start`` and step default to ``int | None``."
msgstr ""

#: ../pep-0696.rst:197
msgid ""
"When using a ``TypeVarLike`` as the default to another ``TypeVarLike``. "
"Where ``T1`` is the default for ``T2`` the following rules apply."
msgstr ""

#: ../pep-0696.rst:203
msgid "Scoping Rules"
msgstr ""

#: ../pep-0696.rst:205
msgid ""
"``T1`` must be used before ``T2`` in the parameter list of the generic, or "
"be bound in an outer class or function scope."
msgstr ""

#: ../pep-0696.rst:227
msgid "Bound Rules"
msgstr ""

#: ../pep-0696.rst:229
msgid "``T2``'s bound must be a subtype of ``T1``'s bound."
msgstr ""

#: ../pep-0696.rst:239
msgid "Constraint Rules"
msgstr ""

#: ../pep-0696.rst:241
msgid ""
"The constraints of ``T2`` must be a superset of the constraints of ``T1``."
msgstr ""

#: ../pep-0696.rst:254
msgid "``TypeVarLike``\\s as Parameters to Generics"
msgstr ""

#: ../pep-0696.rst:256
msgid ""
"``TypeVarLike``\\ s are valid as parameters to generics inside of a "
"``default`` when the first parameter is in scope as determined by the :ref:"
"`previous section <scoping-rules>`."
msgstr ""

#: ../pep-0696.rst:273
msgid "Specialisation Rules"
msgstr ""

#: ../pep-0696.rst:275
msgid ""
"``TypeVarLike``\\ s currently cannot be further subscripted. This might "
"change if `Higher Kinded TypeVars <https://github.com/python/typing/"
"issues/548>`__ are implemented."
msgstr ""

#: ../pep-0696.rst:281
msgid "``Generic`` ``TypeAlias``\\ es"
msgstr ""

#: ../pep-0696.rst:283
msgid ""
"``Generic`` ``TypeAlias``\\ es should be able to be further subscripted "
"following normal subscription rules. If a ``TypeVarLike`` has a default that "
"hasn't been overridden it should be treated like it was substituted into the "
"``TypeAlias``. However, it can be specialised further down the line."
msgstr ""

#: ../pep-0696.rst:300
msgid "Subclassing"
msgstr ""

#: ../pep-0696.rst:302
msgid ""
"Subclasses of ``Generic``\\ s with ``TypeVarLike``\\ s that have defaults "
"behave similarly to ``Generic`` ``TypeAlias``\\ es."
msgstr ""

#: ../pep-0696.rst:326
msgid "Using ``bound`` and ``default``"
msgstr ""

#: ../pep-0696.rst:328
msgid ""
"If both ``bound`` and ``default`` are passed ``default`` must be a subtype "
"of ``bound``. Otherwise the type checker should generate an error."
msgstr ""

#: ../pep-0696.rst:338
msgid "Constraints"
msgstr ""

#: ../pep-0696.rst:340
msgid ""
"For constrained ``TypeVar``\\ s, the default needs to be one of the "
"constraints. A type checker should generate an error even if it is a subtype "
"of one of the constraints."
msgstr ""

#: ../pep-0696.rst:350
msgid "Function Defaults"
msgstr ""

#: ../pep-0696.rst:352
msgid ""
"``TypeVarLike``\\ s currently are not supported in the signatures of "
"functions as ensuring the ``default`` is returned in every code path where "
"the ``TypeVarLike`` can go unsolved is too hard to implement."
msgstr ""

#: ../pep-0696.rst:357
msgid "Implementation"
msgstr ""

#: ../pep-0696.rst:359
msgid ""
"At runtime, this would involve the following changes to the ``typing`` "
"module."
msgstr ""

#: ../pep-0696.rst:362
msgid ""
"The classes ``TypeVar``, ``ParamSpec``, and ``TypeVarTuple`` should expose "
"the type passed to ``default``. This would be available as a ``__default__`` "
"attribute, which would be ``None`` if no argument is passed and ``NoneType`` "
"if ``default=None``."
msgstr ""

#: ../pep-0696.rst:367
msgid "The following changes would be required to both ``GenericAlias``\\ es:"
msgstr ""

#: ../pep-0696.rst:369
msgid "logic to determine the defaults required for a subscription."
msgstr ""

#: ../pep-0696.rst:370
msgid ""
"ideally, logic to determine if subscription (like ``Generic[T, DefaultT]``) "
"would be valid."
msgstr ""

#: ../pep-0696.rst:373
msgid ""
"A reference implementation of the type checker can be found at https://"
"github.com/Gobot1234/mypy/tree/TypeVar-defaults"
msgstr ""

#: ../pep-0696.rst:378
msgid "Interaction with PEP 695"
msgstr ""

#: ../pep-0696.rst:380
msgid ""
"If this PEP is accepted, the syntax proposed in :pep:`695` will be extended "
"to introduce a way to specify defaults for type parameters using the \"=\" "
"operator inside of the square brackets like so:"
msgstr ""

#: ../pep-0696.rst:404
msgid ""
"This functionality was included in the initial draft of :pep:`695` but was "
"removed due to scope creep."
msgstr ""

#: ../pep-0696.rst:408
msgid "Grammar Changes"
msgstr ""

#: ../pep-0696.rst:422
msgid ""
"This would mean that ``TypeVarLike``\\ s with defaults proceeding those with "
"non-defaults can be checked at compile time."
msgstr ""

#: ../pep-0696.rst:427
msgid "Rejected Alternatives"
msgstr ""

#: ../pep-0696.rst:430
msgid ""
"Allowing the ``TypeVarLike``\\s Defaults to Be Passed to ``type.__new__``'s "
"``**kwargs``"
msgstr ""

#: ../pep-0696.rst:440
msgid ""
"While this is much easier to read and follows a similar rationale to the "
"``TypeVar`` `unary syntax <https://github.com/python/typing/issues/813>`__, "
"it would not be backwards compatible as ``T`` might already be passed to a "
"metaclass/superclass or support classes that don't subclass ``Generic`` at "
"runtime."
msgstr ""

#: ../pep-0696.rst:447
msgid ""
"Ideally, if :pep:`637` wasn't rejected, the following would be acceptable:"
msgstr ""

#: ../pep-0696.rst:458
msgid "Allowing Non-defaults to Follow Defaults"
msgstr ""

#: ../pep-0696.rst:470
msgid ""
"Allowing non-defaults to follow defaults would alleviate the issues with "
"returning types like ``Coroutine`` from functions where the most used type "
"argument is the last (the return). Allowing non-defaults to follow defaults "
"is too confusing and potentially ambiguous, even if only the above two forms "
"were valid. Changing the argument order now would also break a lot of "
"codebases. This is also solvable in most cases using a ``TypeAlias``."
msgstr ""

#: ../pep-0696.rst:484
msgid "Having ``default`` Implicitly Be ``bound``"
msgstr ""

#: ../pep-0696.rst:486
msgid ""
"In an earlier version of this PEP, the ``default`` was implicitly set to "
"``bound`` if no value was passed for ``default``. This while convenient, "
"could have a ``TypeVarLike`` with no default follow a ``TypeVarLike`` with a "
"default. Consider:"
msgstr ""

#: ../pep-0696.rst:507
msgid ""
"This would have also been a breaking change for a small number of cases "
"where the code relied on ``Any`` being the implicit default."
msgstr ""

#: ../pep-0696.rst:512
msgid "Acknowledgements"
msgstr ""

#: ../pep-0696.rst:514
msgid "Thanks to the following people for their feedback on the PEP:"
msgstr ""

#: ../pep-0696.rst:516
msgid ""
"Eric Traut, Jelle Zijlstra, Joshua Butt, Danny Yamamoto, Kaylynn Morgan and "
"Jakub Kuczys"
msgstr ""

#: ../pep-0696.rst:521
msgid "Copyright"
msgstr ""

#: ../pep-0696.rst:522
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
