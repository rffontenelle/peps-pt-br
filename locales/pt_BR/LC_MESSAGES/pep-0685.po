# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0685.rst
msgid "Author"
msgstr ""

#: ../pep-0685.rst:3
msgid "Brett Cannon <brett@python.org>"
msgstr ""

#: ../pep-0685.rst
msgid "PEP-Delegate"
msgstr ""

#: ../pep-0685.rst:4
msgid "Paul Moore <p.f.moore@gmail.com>"
msgstr ""

#: ../pep-0685.rst
msgid "Discussions-To"
msgstr ""

#: ../pep-0685.rst:5
msgid "https://discuss.python.org/t/14141"
msgstr ""

#: ../pep-0685.rst
msgid "Status"
msgstr ""

#: ../pep-0685.rst:6
msgid "Accepted"
msgstr ""

#: ../pep-0685.rst
msgid "Type"
msgstr ""

#: ../pep-0685.rst:7
msgid "Standards Track"
msgstr ""

#: ../pep-0685.rst
msgid "Topic"
msgstr ""

#: ../pep-0685.rst:8
msgid "Packaging"
msgstr ""

#: ../pep-0685.rst
msgid "Created"
msgstr ""

#: ../pep-0685.rst:10
msgid "08-Mar-2022"
msgstr ""

#: ../pep-0685.rst
msgid "Post-History"
msgstr ""

#: ../pep-0685.rst:11
msgid "`08-Mar-2022 <https://discuss.python.org/t/14141>`__"
msgstr ""

#: ../pep-0685.rst
msgid "Resolution"
msgstr ""

#: ../pep-0685.rst:12
msgid ""
"https://discuss.python.org/t/pep-685-comparison-of-extra-names-for-optional-"
"distribution-dependencies/14141/55"
msgstr ""

#: ../pep-0685.rst:19
msgid "Abstract"
msgstr ""

#: ../pep-0685.rst:21
msgid ""
"This PEP specifies how to normalize `distribution extra <Provides-Extra_>`_ "
"names when performing comparisons. This prevents tools from either failing "
"to find an extra name, or accidentally matching against an unexpected name."
msgstr ""

#: ../pep-0685.rst:28
msgid "Motivation"
msgstr ""

#: ../pep-0685.rst:30
msgid ""
"The `Provides-Extra`_ core metadata specification states that an extra's "
"name \"must be a valid Python identifier\". :pep:`508` specifies that the "
"value of an ``extra`` marker may contain a letter, digit, or any one of ``."
"``, ``-``, or ``_`` after the initial character. There is no other `PyPA "
"specification <https://packaging.python.org/en/latest/specifications/>`_ "
"which outlines how extra names should be written or normalized for "
"comparison. Due to the amount of packaging-related code in existence, it is "
"important to evaluate current practices by the community and standardize on "
"one that doesn't break most existing code, while being something tool "
"authors can agree to following."
msgstr ""

#: ../pep-0685.rst:42
msgid ""
"The issue of there being no consistent standard was brought forward by an "
"`initial discussion <https://discuss.python.org/t/7614>`__ noting that the "
"extra ``adhoc-ssl`` was not considered equal to the name ``adhoc_ssl`` by "
"pip 22."
msgstr ""

#: ../pep-0685.rst:49
msgid "Rationale"
msgstr ""

#: ../pep-0685.rst:51
msgid ":pep:`503` specifies how to normalize distribution names::"
msgstr ""

#: ../pep-0685.rst:55
msgid ""
"This collapses any run of the characters ``-``, ``_`` and ``.`` down to a "
"single ``-``. For example, ``---`` ``.`` and ``__`` all get converted to "
"just ``-``. This does **not** produce a valid Python identifier, per the "
"core metadata 2.2 specification for extra names."
msgstr ""

#: ../pep-0685.rst:61
msgid ""
"`Setuptools 60 performs normalization <https://github.com/pypa/setuptools/"
"blob/b2f7b8f92725c63b164d5776f85e67cc560def4e/pkg_resources/__init__."
"py#L1324-L1330>`__ via::"
msgstr ""

#: ../pep-0685.rst:66
msgid ""
"The use of an underscore/``_`` differs from PEP 503's use of a hyphen/``-``, "
"and it also normalizes characters outside of those allowed by :pep:`508`. "
"Runs of ``.`` and ``-``, unlike PEP 503, do **not** get normalized to one "
"``_``, e.g. ``..`` stays the same. To note, this is inconsistent with this "
"function's docstring, which *does* specify that all non-alphanumeric "
"characters (which would include ``-`` and ``.``) are normalized and "
"collapsed."
msgstr ""

#: ../pep-0685.rst:73
msgid ""
"For pip 22, its \"extra normalisation behaviour is quite convoluted and "
"erratic\" [pip-erratic]_ and so its use is not considered."
msgstr ""

#: ../pep-0685.rst:77
msgid ""
"Tzu-ping Chung on Python Discourse <https://discuss.python.org/t/7614/10"
msgstr ""

#: ../pep-0685.rst:81
msgid "Specification"
msgstr ""

#: ../pep-0685.rst:83
msgid ""
"When comparing extra names, tools MUST normalize the names being compared "
"using the semantics outlined in :pep:`PEP 503 <0503#normalized-names>` for "
"names::"
msgstr ""

#: ../pep-0685.rst:89
msgid ""
"The `core metadata`_ specification will be updated such that the allowed "
"names for `Provides-Extra`_ matches what :pep:`508` specifies for names. "
"This will bring extra naming in line with that of the Name_ field. Because "
"this changes what is considered valid, it will lead to a core metadata "
"version increase to ``2.3``."
msgstr ""

#: ../pep-0685.rst:95
msgid ""
"For tools writing `core metadata`_, they MUST write out extra names in their "
"normalized form. This applies to the `Provides-Extra`_ field and the :pep:"
"`extra marker <0508#extras>` when used in the `Requires-Dist`_ field."
msgstr ""

#: ../pep-0685.rst:100
msgid ""
"Tools generating metadata MUST raise an error if a user specified two or "
"more extra names which would normalize to the same name. Tools generating "
"metadata MUST raise an error if an invalid extra name is provided as "
"appropriate for the specified core metadata version. If a project's metadata "
"specifies an older core metadata version and the name would be invalid with "
"newer core metadata versions, tools reading that metadata SHOULD warn the "
"user. Tools SHOULD warn users when an invalid extra name is read and SHOULD "
"ignore the name to avoid ambiguity. Tools MAY raise an error instead of a "
"warning when reading an invalid name, if they so desire."
msgstr ""

#: ../pep-0685.rst:114
msgid "Backwards Compatibility"
msgstr ""

#: ../pep-0685.rst:116
msgid ""
"Moving to :pep:`503` normalization and :pep:`508` name acceptance allows for "
"all preexisting, valid names to continue to be valid."
msgstr ""

#: ../pep-0685.rst:119
msgid ""
"Based on research looking at a collection of wheels on PyPI [pypi-results]_, "
"the risk of extra name clashes is limited to 73 instances when considering "
"all extras names on PyPI, valid or not (not just those within a single "
"package) while *only* looking at valid names leads to only 3 clashes:"
msgstr ""

#: ../pep-0685.rst:124
msgid "``dev-test``: ``dev_test``, ``dev-test``, ``dev.test``"
msgstr ""

#: ../pep-0685.rst:125
msgid "``dev-lint``: ``dev-lint``, ``dev.lint``, ``dev_lint``"
msgstr ""

#: ../pep-0685.rst:126
msgid "``apache-beam``: ``apache-beam``, ``apache.beam``"
msgstr ""

#: ../pep-0685.rst:128
msgid ""
"By requiring tools writing core metadata to only record the normalized name, "
"the issue of preexisting, invalid extra names should diminish over time."
msgstr ""

#: ../pep-0685.rst:131
msgid "Paul Moore on Python Discourse https://discuss.python.org/t/14141/17"
msgstr ""

#: ../pep-0685.rst:135
msgid "Security Implications"
msgstr ""

#: ../pep-0685.rst:137
msgid ""
"It is possible that for a distribution that has conflicting extra names, a "
"tool ends up installing dependencies that somehow weaken the security of the "
"system. This is only hypothetical and if it were to occur, it would probably "
"be more of a security concern for the distributions specifying such extras "
"names rather than the distribution that pulled them in together."
msgstr ""

#: ../pep-0685.rst:147
msgid "How to Teach This"
msgstr ""

#: ../pep-0685.rst:149
msgid ""
"This should be transparent to users on a day-to-day basis. It will be up to "
"tools to educate/stop users when they select extra names which conflict."
msgstr ""

#: ../pep-0685.rst:155
msgid "Reference Implementation"
msgstr ""

#: ../pep-0685.rst:157
msgid ""
"No reference implementation is provided aside from the code above, but the "
"expectation is the `packaging project`_ will provide a function in its "
"``packaging.utils`` module that will implement extra name normalization. It "
"will also implement extra name comparisons appropriately. Finally, if the "
"project ever gains the ability to write out metadata, it will also implement "
"this PEP."
msgstr ""

#: ../pep-0685.rst:167
msgid "Transition Plan"
msgstr ""

#: ../pep-0685.rst:169
msgid ""
"There is a risk that a build tool will produce core metadata conforming to "
"version 2.3 and thus this PEP but which is consumed by a tool that is "
"unaware of this PEP (if that tool chooses to attempt to read a core metadata "
"version it does not directly support). In such a case there is a chance that "
"a user may specify an extra using an non-normalized name which worked "
"previously but which fails now."
msgstr ""

#: ../pep-0685.rst:177
msgid ""
"As such, consumers of this PEP should be prioritized more than producers so "
"that users can be notified that they are specifying extra names which are "
"not normalized (and thus may break in the future)."
msgstr ""

#: ../pep-0685.rst:183
msgid "Rejected Ideas"
msgstr ""

#: ../pep-0685.rst:186
msgid "Using setuptools 60's normalization"
msgstr ""

#: ../pep-0685.rst:188
msgid ""
"Initially, this PEP proposed using setuptools ``safe_extra()`` for "
"normalization to try to minimize backwards-compatibility issues. However, "
"after checking various wheels on PyPI, it became clear that standardizing "
"**all** naming on :pep:`508` and :pep:`503` semantics was easier and better "
"long-term, while causing minimal backwards compatibility issues."
msgstr ""

#: ../pep-0685.rst:197
msgid "Open Issues"
msgstr ""

#: ../pep-0685.rst:199
msgid "N/A"
msgstr ""

#: ../pep-0685.rst:203
msgid "Copyright"
msgstr ""

#: ../pep-0685.rst:205
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
