# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0211.txt
msgid "Author"
msgstr ""

#: ../pep-0211.txt:3
msgid "Greg Wilson <gvwilson@ddj.com>"
msgstr ""

#: ../pep-0211.txt
msgid "Status"
msgstr ""

#: ../pep-0211.txt:4
msgid "Rejected"
msgstr ""

#: ../pep-0211.txt
msgid "Type"
msgstr ""

#: ../pep-0211.txt:5
msgid "Standards Track"
msgstr ""

#: ../pep-0211.txt
msgid "Created"
msgstr ""

#: ../pep-0211.txt:7
msgid "15-Jul-2000"
msgstr ""

#: ../pep-0211.txt
msgid "Python-Version"
msgstr ""

#: ../pep-0211.txt:8
msgid "2.1"
msgstr ""

#: ../pep-0211.txt
msgid "Post-History"
msgstr ""

#: ../pep-0211.txt:14
msgid ""
"The approach in the later :pep:`465` was eventually accepted in lieu of this "
"PEP. The :pep:`Rejected Ideas <465#rejected-alternatives-to-adding-a-new-"
"operator>` of that PEP explains the rationale in more detail."
msgstr ""

#: ../pep-0211.txt:21
msgid "Introduction"
msgstr ""

#: ../pep-0211.txt:23
msgid ""
"This PEP describes a proposal to define ``@`` (pronounced \"across\") as a "
"new outer product operator in Python 2.2.  When applied to sequences (or "
"other iterable objects), this operator will combine their iterators, so "
"that::"
msgstr ""

#: ../pep-0211.txt:31
msgid "will be equivalent to::"
msgstr ""

#: ../pep-0211.txt:37
msgid ""
"Classes will be able to overload this operator using the special methods "
"``__across__``, ``__racross__``, and ``__iacross__``.  In particular, the "
"new Numeric module (:pep:`209`) will overload this operator for multi-"
"dimensional arrays to implement matrix multiplication."
msgstr ""

#: ../pep-0211.txt:45
msgid "Background"
msgstr ""

#: ../pep-0211.txt:47
msgid ""
"Number-crunching is now just a small part of computing, but many programmers "
"--- including many Python users --- still need to express complex "
"mathematical operations in code.  Most numerical languages, such as APL, "
"Fortran-90, MATLAB, IDL, and Mathematica, therefore provide two forms of the "
"common arithmetic operators. One form works element-by-element, e.g. "
"multiplies corresponding elements of its matrix arguments.  The other "
"implements the \"mathematical\" definition of that operation, e.g. performs "
"row-column matrix multiplication."
msgstr ""

#: ../pep-0211.txt:57
msgid ""
"Zhu and Lielens have :pep:`proposed <225>` doubling up Python's operators in "
"this way.  Their proposal would create six new binary infix operators, and "
"six new in-place operators."
msgstr ""

#: ../pep-0211.txt:61
msgid ""
"The original version of this proposal was much more conservative. The author "
"consulted the developers of GNU Octave [1]_, an open source clone of "
"MATLAB.  Its developers agreed that providing an infix operator for matrix "
"multiplication was important: numerical programmers really do care whether "
"they have to write ``mmul(A,B)`` instead of ``A op B``."
msgstr ""

#: ../pep-0211.txt:68
msgid ""
"On the other hand, when asked how important it was to have infix operators "
"for matrix solution and other operations, Prof. James Rawlings replied [2]_:"
msgstr ""

#: ../pep-0211.txt:72
msgid ""
"I DON'T think it's a must have, and I do a lot of matrix inversion. I cannot "
"remember if its ``A\\b`` or ``b\\A`` so I always write ``inv(A)*b`` instead. "
"I recommend dropping ``\\``."
msgstr ""

#: ../pep-0211.txt:76
msgid ""
"Based on this discussion, and feedback from students at the US national "
"laboratories and elsewhere, we recommended adding only one new operator, for "
"matrix multiplication, to Python."
msgstr ""

#: ../pep-0211.txt:82
msgid "Iterators"
msgstr ""

#: ../pep-0211.txt:84
msgid ""
"The planned addition of iterators to Python 2.2 opens up a broader scope for "
"this proposal.  As part of the discussion of :pep:`201`, Lockstep Iteration, "
"the author of this proposal conducted an informal usability experiment "
"[3]_.  The results showed that users are psychologically receptive to "
"\"cross-product\" loop syntax.  For example, most users expected::"
msgstr ""

#: ../pep-0211.txt:96
msgid ""
"to print ``11 12 13 21 22 23 31 32 33``.  We believe that users will have "
"the same reaction to::"
msgstr ""

#: ../pep-0211.txt:102
msgid ""
"i.e. that they will naturally interpret this as a tidy way to write loop "
"nests."
msgstr ""

#: ../pep-0211.txt:105
msgid ""
"This is where iterators come in.  Actually constructing the cross-product of "
"two (or more) sequences before executing the loop would be very expensive.  "
"On the other hand, ``@`` could be defined to get its arguments' iterators, "
"and then create an outer iterator which returns tuples of the values "
"returned by the inner iterators."
msgstr ""

#: ../pep-0211.txt:114
msgid "Discussion"
msgstr ""

#: ../pep-0211.txt:116
msgid ""
"Adding a named function \"across\" would have less impact on Python than a "
"new infix operator.  However, this would not make Python more appealing to "
"numerical programmers, who really do care whether they can write matrix "
"multiplication using an operator, or whether they have to write it as a "
"function call."
msgstr ""

#: ../pep-0211.txt:122
msgid ""
"``@`` would have be chainable in the same way as comparison operators, i.e.::"
msgstr ""

#: ../pep-0211.txt:127
msgid ""
"would have to return ``(1, 3, 5) ... (2, 4, 6)``, and *not* ``((1, 3), "
"5) ... ((2, 4), 6)``.  This should not require special support from the "
"parser, as the outer iterator created by the first ``@`` could easily be "
"taught how to combine itself with ordinary iterators."
msgstr ""

#: ../pep-0211.txt:133
msgid ""
"There would have to be some way to distinguish restartable iterators from "
"ones that couldn't be restarted.  For example, if ``S`` is an input stream "
"(e.g. a file), and ``L`` is a list, then ``S @ L`` is straightforward, but "
"``L @ S`` is not, since iteration through the stream cannot be repeated.  "
"This could be treated as an error, or by having the outer iterator detect "
"non-restartable inner iterators and cache their values."
msgstr ""

#: ../pep-0211.txt:141
msgid ""
"Whiteboard testing of this proposal in front of three novice Python users "
"(all of them experienced programmers) indicates that users will expect::"
msgstr ""

#: ../pep-0211.txt:147
msgid ""
"to return four strings, not four tuples of pairs of characters.  Opinion was "
"divided on what::"
msgstr ""

#: ../pep-0211.txt:152
msgid "ought to return..."
msgstr ""

#: ../pep-0211.txt:156
msgid "Alternatives"
msgstr ""

#: ../pep-0211.txt:158
msgid "Do nothing --- keep Python simple."
msgstr ""

#: ../pep-0211.txt:160
msgid "This is always the default choice."
msgstr ""

#: ../pep-0211.txt:162
msgid "Add a named function instead of an operator."
msgstr ""

#: ../pep-0211.txt:164
msgid ""
"Python is not primarily a numerical language; it may not be worth "
"complexifying it for this special case.  However, support for real matrix "
"multiplication *is* frequently requested, and the proposed semantics for "
"``@`` for built-in sequence types would simplify expression of a very common "
"idiom (nested loops)."
msgstr ""

#: ../pep-0211.txt:170
msgid ""
"Introduce prefixed forms of all existing operators, such as ``~*`` and "
"``~+``, as proposed in :pep:`225`."
msgstr ""

#: ../pep-0211.txt:173
msgid ""
"Our objections to this are that there isn't enough demand to justify the "
"additional complexity (see Rawlings' comments [2]_), and that the proposed "
"syntax fails the \"low toner\" readability test."
msgstr ""

#: ../pep-0211.txt:180
msgid "Acknowledgments"
msgstr ""

#: ../pep-0211.txt:182
msgid ""
"I am grateful to Huaiyu Zhu for initiating this discussion, and to James "
"Rawlings and students in various Python courses for their discussions of "
"what numerical programmers really care about."
msgstr ""

#: ../pep-0211.txt:188
msgid "References"
msgstr ""

#: ../pep-0211.txt:190
msgid "http://bevo.che.wisc.edu/octave/"
msgstr ""

#: ../pep-0211.txt:192
msgid "http://www.egroups.com/message/python-numeric/4"
msgstr ""

#: ../pep-0211.txt:194
msgid "https://mail.python.org/pipermail/python-dev/2000-July/006427.html"
msgstr ""
