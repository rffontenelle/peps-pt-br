# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0230.txt
msgid "Author"
msgstr "Autor"

#: ../pep-0230.txt:3
msgid "Guido van Rossum <guido@python.org>"
msgstr ""

#: ../pep-0230.txt
msgid "Status"
msgstr "Status"

#: ../pep-0230.txt:4
msgid "Final"
msgstr ""

#: ../pep-0230.txt
msgid "Type"
msgstr "Tipo"

#: ../pep-0230.txt:5
msgid "Standards Track"
msgstr ""

#: ../pep-0230.txt
msgid "Created"
msgstr "Criada em"

#: ../pep-0230.txt:7
msgid "28-Nov-2000"
msgstr ""

#: ../pep-0230.txt
msgid "Python-Version"
msgstr ""

#: ../pep-0230.txt:8
msgid "2.1"
msgstr ""

#: ../pep-0230.txt
msgid "Post-History"
msgstr "Pós-história"

#: ../pep-0230.txt:9
msgid "05-Nov-2000"
msgstr ""

#: ../pep-0230.txt:13
msgid "Abstract"
msgstr ""

#: ../pep-0230.txt:15
msgid ""
"This PEP proposes a C and Python level API, as well as command line flags, "
"to issue warning messages and control what happens to them.  This is mostly "
"based on GvR's proposal posted to python-dev on 05-Nov-2000, with some ideas "
"(such as using classes to categorize warnings) merged in from Paul Prescod's "
"counter-proposal posted on the same date.  Also, an attempt to implement the "
"proposal caused several small tweaks."
msgstr ""

#: ../pep-0230.txt:25
msgid "Motivation"
msgstr ""

#: ../pep-0230.txt:27
msgid ""
"With Python 3000 looming, it is necessary to start issuing warnings about "
"the use of obsolete or deprecated features, in addition to errors.  There "
"are also lots of other reasons to be able to issue warnings, both from C and "
"from Python code, both at compile time and at run time."
msgstr ""

#: ../pep-0230.txt:33
msgid ""
"Warnings aren't fatal, and thus it's possible that a program triggers the "
"same warning many times during a single execution. It would be annoying if a "
"program emitted an endless stream of identical warnings.  Therefore, a "
"mechanism is needed that suppresses multiple identical warnings."
msgstr ""

#: ../pep-0230.txt:39
msgid ""
"It is also desirable to have user control over which warnings are printed.  "
"While in general it is useful to see all warnings all the time, there may be "
"times where it is impractical to fix the code right away in a production "
"program.  In this case, there should be a way to suppress warnings."
msgstr ""

#: ../pep-0230.txt:45
msgid ""
"It is also useful to be able to suppress specific warnings during program "
"development, e.g. when a warning is generated by a piece of 3rd party code "
"that cannot be fixed right away, or when there is no way to fix the code "
"(possibly a warning message is generated for a perfectly fine piece of "
"code).  It would be unwise to offer to suppress all warnings in such cases: "
"the developer would miss warnings about the rest of the code."
msgstr ""

#: ../pep-0230.txt:53
msgid ""
"On the other hand, there are also situations conceivable where some or all "
"warnings are better treated as errors.  For example, it may be a local "
"coding standard that a particular deprecated feature should not be used.  In "
"order to enforce this, it is useful to be able to turn the warning about "
"this particular feature into an error, raising an exception (without "
"necessarily turning all warnings into errors)."
msgstr ""

#: ../pep-0230.txt:61
msgid ""
"Therefore, I propose to introduce a flexible \"warning filter\" which can "
"filter out warnings or change them into exceptions, based on:"
msgstr ""

#: ../pep-0230.txt:65
msgid "Where in the code they are generated (per package, module, or function)"
msgstr ""

#: ../pep-0230.txt:68
msgid "The warning category (warning categories are discussed below)"
msgstr ""

#: ../pep-0230.txt:70
msgid "A specific warning message"
msgstr ""

#: ../pep-0230.txt:72
msgid ""
"The warning filter must be controllable both from the command line and from "
"Python code."
msgstr ""

#: ../pep-0230.txt:77
msgid "APIs For Issuing Warnings"
msgstr ""

#: ../pep-0230.txt:79
msgid "To issue a warning from Python::"
msgstr ""

#: ../pep-0230.txt:84
msgid ""
"The category argument, if given, must be a warning category class (see "
"below); it defaults to warnings.UserWarning.  This may raise an exception if "
"the particular warning issued is changed into an error by the warnings "
"filter.  The stacklevel can be used by wrapper functions written in Python, "
"like this::"
msgstr ""

#: ../pep-0230.txt:93
msgid ""
"This makes the warning refer to the deprecation()'s caller, rather than to "
"the source of deprecation() itself (since the latter would defeat the "
"purpose of the warning message)."
msgstr ""

#: ../pep-0230.txt:97
msgid "To issue a warning from C::"
msgstr ""

#: ../pep-0230.txt:101
msgid ""
"Return 0 normally, 1 if an exception is raised (either because the warning "
"was transformed into an exception, or because of a malfunction in the "
"implementation, such as running out of memory).  The category argument must "
"be a warning category class (see below) or ``NULL``, in which case it "
"defaults to ``PyExc_RuntimeWarning``.  When ``PyErr_Warn()`` function "
"returns 1, the caller should do normal exception handling."
msgstr ""

#: ../pep-0230.txt:109
msgid ""
"The current C implementation of ``PyErr_Warn()`` imports the warnings module "
"(implemented in Python) and calls its ``warn()`` function.  This minimizes "
"the amount of C code that needs to be added to implement the warning feature."
msgstr ""

#: ../pep-0230.txt:114
msgid ""
"[XXX Open Issue: what about issuing warnings during lexing or parsing, which "
"don't have the exception machinery available?]"
msgstr ""

#: ../pep-0230.txt:119
msgid "Warnings Categories"
msgstr ""

#: ../pep-0230.txt:121
msgid ""
"There are a number of built-in exceptions that represent warning "
"categories.  This categorization is useful to be able to filter out groups "
"of warnings.  The following warnings category classes are currently defined:"
msgstr ""

#: ../pep-0230.txt:126
msgid ""
"``Warning`` -- this is the base class of all warning category classes and it "
"itself a subclass of Exception"
msgstr ""

#: ../pep-0230.txt:129
msgid "``UserWarning`` -- the default category for ``warnings.warn()``"
msgstr ""

#: ../pep-0230.txt:131
msgid ""
"``DeprecationWarning`` -- base category for warnings about deprecated "
"features"
msgstr ""

#: ../pep-0230.txt:134
msgid ""
"``SyntaxWarning`` -- base category for warnings about dubious syntactic "
"features"
msgstr ""

#: ../pep-0230.txt:137
msgid ""
"``RuntimeWarning`` -- base category for warnings about dubious runtime "
"features"
msgstr ""

#: ../pep-0230.txt:140
msgid ""
"[XXX: Other warning categories may be proposed during the review period for "
"this PEP.]"
msgstr ""

#: ../pep-0230.txt:143
msgid ""
"These standard warning categories are available from C as ``PyExc_Warning``, "
"``PyExc_UserWarning``, etc.  From Python, they are available in the "
"``__builtin__`` module, so no import is necessary."
msgstr ""

#: ../pep-0230.txt:147
msgid ""
"User code can define additional warning categories by subclassing one of the "
"standard warning categories.  A warning category must always be a subclass "
"of the Warning class."
msgstr ""

#: ../pep-0230.txt:153
msgid "The Warnings Filter"
msgstr ""

#: ../pep-0230.txt:155
msgid ""
"The warnings filter control whether warnings are ignored, displayed, or "
"turned into errors (raising an exception)."
msgstr ""

#: ../pep-0230.txt:158
msgid "There are three sides to the warnings filter:"
msgstr ""

#: ../pep-0230.txt:160
msgid ""
"The data structures used to efficiently determine the disposition of a "
"particular ``warnings.warn()`` or ``PyErr_Warn()`` call."
msgstr ""

#: ../pep-0230.txt:164
msgid "The API to control the filter from Python source code."
msgstr ""

#: ../pep-0230.txt:166
msgid "The command line switches to control the filter."
msgstr ""

#: ../pep-0230.txt:168
msgid ""
"The warnings filter works in several stages.  It is optimized for the "
"(expected to be common) case where the same warning is issued from the same "
"place in the code over and over."
msgstr ""

#: ../pep-0230.txt:172
msgid ""
"First, the warning filter collects the module and line number where the "
"warning is issued; this information is readily available through ``sys."
"_getframe()``."
msgstr ""

#: ../pep-0230.txt:176
msgid ""
"Conceptually, the warnings filter maintains an ordered list of filter "
"specifications; any specific warning is matched against each filter "
"specification in the list in turn until a match is found; the match "
"determines the disposition of the match.  Each entry is a tuple as follows::"
msgstr ""

#: ../pep-0230.txt:184
msgid ""
"category is a class (a subclass of ``warnings.Warning``) of which the "
"warning category must be a subclass in order to match"
msgstr ""

#: ../pep-0230.txt:187
msgid ""
"message is a compiled regular expression that the warning message must match "
"(the match is case-insensitive)"
msgstr ""

#: ../pep-0230.txt:190
msgid "module is a compiled regular expression that the module name must match"
msgstr ""

#: ../pep-0230.txt:193
msgid ""
"lineno is an integer that the line number where the warning occurred must "
"match, or 0 to match all line numbers"
msgstr ""

#: ../pep-0230.txt:196
msgid "action is one of the following strings:"
msgstr ""

#: ../pep-0230.txt:198
msgid "\"error\" -- turn matching warnings into exceptions"
msgstr ""

#: ../pep-0230.txt:200
msgid "\"ignore\" -- never print matching warnings"
msgstr ""

#: ../pep-0230.txt:202
msgid "\"always\" -- always print matching warnings"
msgstr ""

#: ../pep-0230.txt:204
msgid ""
"\"default\" -- print the first occurrence of matching warnings for each "
"location where the warning is issued"
msgstr ""

#: ../pep-0230.txt:207
msgid ""
"\"module\" -- print the first occurrence of matching warnings for each "
"module where the warning is issued"
msgstr ""

#: ../pep-0230.txt:210
msgid "\"once\" -- print only the first occurrence of matching warnings"
msgstr ""

#: ../pep-0230.txt:213
msgid ""
"Since the ``Warning`` class is derived from the built-in ``Exception`` "
"class, to turn a warning into an error we simply raise ``category(message)``."
msgstr ""

#: ../pep-0230.txt:219
msgid "Warnings Output And Formatting Hooks"
msgstr ""

#: ../pep-0230.txt:221
msgid ""
"When the warnings filter decides to issue a warning (but not when it decides "
"to raise an exception), it passes the information about the function "
"``warnings.showwarning(message, category, filename, lineno)``. The default "
"implementation of this function writes the warning text to ``sys.stderr``, "
"and shows the source line of the filename.  It has an optional 5th argument "
"which can be used to specify a different file than ``sys.stderr``."
msgstr ""

#: ../pep-0230.txt:229
msgid ""
"The formatting of warnings is done by a separate function, ``warnings."
"formatwarning(message, category, filename, lineno)``.  This returns a string "
"(that may contain newlines and ends in a newline) that can be printed to get "
"the identical effect of the ``showwarning()`` function."
msgstr ""

#: ../pep-0230.txt:237
msgid "API For Manipulating Warning Filters"
msgstr ""

#: ../pep-0230.txt:242
msgid ""
"This checks the types of the arguments, compiles the message and module "
"regular expressions, and inserts them as a tuple in front of the warnings "
"filter."
msgstr ""

#: ../pep-0230.txt:250
msgid "Reset the warnings filter to empty."
msgstr ""

#: ../pep-0230.txt:254
msgid "Command Line Syntax"
msgstr ""

#: ../pep-0230.txt:256
msgid ""
"There should be command line options to specify the most common filtering "
"actions, which I expect to include at least:"
msgstr ""

#: ../pep-0230.txt:259
msgid "suppress all warnings"
msgstr ""

#: ../pep-0230.txt:261
msgid "suppress a particular warning message everywhere"
msgstr ""

#: ../pep-0230.txt:263
msgid "suppress all warnings in a particular module"
msgstr ""

#: ../pep-0230.txt:265
msgid "turn all warnings into exceptions"
msgstr ""

#: ../pep-0230.txt:267
msgid "I propose the following command line option syntax::"
msgstr ""

#: ../pep-0230.txt:271
msgid "Where:"
msgstr ""

#: ../pep-0230.txt:273
msgid ""
"'action' is an abbreviation of one of the allowed actions (\"error\", "
"\"default\", \"ignore\", \"always\", \"once\", or \"module\")"
msgstr ""

#: ../pep-0230.txt:276
msgid ""
"'message' is a message string; matches warnings whose message text is an "
"initial substring of 'message' (matching is case-insensitive)"
msgstr ""

#: ../pep-0230.txt:280
msgid ""
"'category' is an abbreviation of a standard warning category class name "
"**or** a fully-qualified name for a user-defined warning category class of "
"the form [package.]module.classname"
msgstr ""

#: ../pep-0230.txt:284
msgid "'module' is a module name (possibly package.module)"
msgstr ""

#: ../pep-0230.txt:286
msgid "'lineno' is an integral line number"
msgstr ""

#: ../pep-0230.txt:288
msgid ""
"All parts except 'action' may be omitted, where an empty value after "
"stripping whitespace is the same as an omitted value."
msgstr ""

#: ../pep-0230.txt:291
msgid ""
"The C code that parses the Python command line saves the body of all -W "
"options in a list of strings, which is made available to the warnings module "
"as sys.warnoptions.  The warnings module parses these when it is first "
"imported.  Errors detected during the parsing of sys.warnoptions are not "
"fatal; a message is written to sys.stderr and processing continues with the "
"option."
msgstr ""

#: ../pep-0230.txt:298
msgid "Examples:"
msgstr ""

#: ../pep-0230.txt:301
msgid "``-Werror``"
msgstr ""

#: ../pep-0230.txt:301
msgid "Turn all warnings into errors"
msgstr ""

#: ../pep-0230.txt:304
msgid "``-Wall``"
msgstr ""

#: ../pep-0230.txt:304
msgid "Show all warnings"
msgstr ""

#: ../pep-0230.txt:307
msgid "``-Wignore``"
msgstr ""

#: ../pep-0230.txt:307
msgid "Ignore all warnings"
msgstr ""

#: ../pep-0230.txt:310
msgid "``-Wi:hello``"
msgstr ""

#: ../pep-0230.txt:310
msgid "Ignore warnings whose message text starts with \"hello\""
msgstr ""

#: ../pep-0230.txt:313
msgid "``-We::Deprecation``"
msgstr ""

#: ../pep-0230.txt:313
msgid "Turn deprecation warnings into errors"
msgstr ""

#: ../pep-0230.txt:316
msgid "``-Wi:::spam:10``"
msgstr ""

#: ../pep-0230.txt:316
msgid "Ignore all warnings on line 10 of module spam"
msgstr ""

#: ../pep-0230.txt:319
msgid "``-Wi:::spam -Wd:::spam:10``"
msgstr ""

#: ../pep-0230.txt:319
msgid "Ignore all warnings in module spam except on line 10"
msgstr ""

#: ../pep-0230.txt:323
msgid "``-We::Deprecation -Wd::Deprecation:spam``"
msgstr ""

#: ../pep-0230.txt:322
msgid "Turn deprecation warnings into errors except in module spam"
msgstr ""

#: ../pep-0230.txt:326
msgid "Open Issues"
msgstr ""

#: ../pep-0230.txt:328
msgid "Some open issues off the top of my head:"
msgstr ""

#: ../pep-0230.txt:330
msgid ""
"What about issuing warnings during lexing or parsing, which don't have the "
"exception machinery available?"
msgstr ""

#: ../pep-0230.txt:333
msgid ""
"The proposed command line syntax is a bit ugly (although the simple cases "
"aren't so bad: ``-Werror``, ``-Wignore``, etc.).  Anybody got a better idea?"
msgstr ""

#: ../pep-0230.txt:337
msgid ""
"I'm a bit worried that the filter specifications are too complex.  Perhaps "
"filtering only on category and module (not on message text and line number) "
"would be enough?"
msgstr ""

#: ../pep-0230.txt:341
msgid ""
"There's a bit of confusion between module names and file names. The "
"reporting uses file names, but the filter specification uses module names.  "
"Maybe it should allow filenames as well?"
msgstr ""

#: ../pep-0230.txt:345
msgid "I'm not at all convinced that packages are handled right."
msgstr ""

#: ../pep-0230.txt:347
msgid "Do we need more standard warning categories?  Fewer?"
msgstr ""

#: ../pep-0230.txt:349
msgid ""
"In order to minimize the start-up overhead, the warnings module is imported "
"by the first call to ``PyErr_Warn()``.  It does the command line parsing for "
"``-W`` options upon import.  Therefore, it is possible that warning-free "
"programs will not complain about invalid ``-W`` options."
msgstr ""

#: ../pep-0230.txt:357
msgid "Rejected Concerns"
msgstr ""

#: ../pep-0230.txt:359
msgid ""
"Paul Prescod, Barry Warsaw and Fred Drake have brought up several additional "
"concerns that I feel aren't critical.  I address them here (the concerns are "
"paraphrased, not exactly their words):"
msgstr ""

#: ../pep-0230.txt:363
msgid ""
"Paul: ``warn()`` should be a built-in or a statement to make it easily "
"available."
msgstr ""

#: ../pep-0230.txt:366
msgid "Response: \"from warnings import warn\" is easy enough."
msgstr ""

#: ../pep-0230.txt:368
msgid ""
"Paul: What if I have a speed-critical module that triggers warnings in an "
"inner loop.  It should be possible to disable the overhead for detecting the "
"warning (not just suppress the warning)."
msgstr ""

#: ../pep-0230.txt:373
msgid "Response: rewrite the inner loop to avoid triggering the warning."
msgstr ""

#: ../pep-0230.txt:376
msgid "Paul: What if I want to see the full context of a warning?"
msgstr ""

#: ../pep-0230.txt:378
msgid "Response: use ``-Werror`` to turn it into an exception."
msgstr ""

#: ../pep-0230.txt:380
msgid ""
"Paul: I prefer \":\\*:\\*:\" to \":::\" for leaving parts of the warning "
"spec out."
msgstr ""

#: ../pep-0230.txt:383
msgid "Response: I don't."
msgstr ""

#: ../pep-0230.txt:385
msgid "Barry: It would be nice if lineno can be a range specification."
msgstr ""

#: ../pep-0230.txt:387
msgid "Response: Too much complexity already."
msgstr ""

#: ../pep-0230.txt:389
msgid ""
"Barry: I'd like to add my own warning action.  Maybe if 'action' could be a "
"callable as well as a string.  Then in my IDE, I could set that to \"mygui."
"popupWarningsDialog\"."
msgstr ""

#: ../pep-0230.txt:393
msgid ""
"Response: For that purpose you would override ``warnings.showwarning()``."
msgstr ""

#: ../pep-0230.txt:396
msgid ""
"Fred: why do the Warning category classes have to be in ``__builtin__``?"
msgstr ""

#: ../pep-0230.txt:399
msgid ""
"Response: that's the simplest implementation, given that the warning "
"categories must be available in C before the first ``PyErr_Warn()`` call, "
"which imports the warnings module.  I see no problem with making them "
"available as built-ins."
msgstr ""

#: ../pep-0230.txt:406
msgid "Implementation"
msgstr ""

#: ../pep-0230.txt:408
msgid ""
"Here's a prototype implementation: http://sourceforge.net/patch/?"
"func=detailpatch&patch_id=102715&group_id=5470"
msgstr ""
