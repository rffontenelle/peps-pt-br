# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0269.txt
msgid "Author"
msgstr "Autor"

#: ../pep-0269.txt:3
msgid "Jonathan Riehl <jriehl@spaceship.com>"
msgstr ""

#: ../pep-0269.txt
msgid "Status"
msgstr "Status"

#: ../pep-0269.txt:4
msgid "Deferred"
msgstr ""

#: ../pep-0269.txt
msgid "Type"
msgstr "Tipo"

#: ../pep-0269.txt:5
msgid "Standards Track"
msgstr ""

#: ../pep-0269.txt
msgid "Created"
msgstr "Criada em"

#: ../pep-0269.txt:7
msgid "24-Aug-2001"
msgstr ""

#: ../pep-0269.txt
msgid "Python-Version"
msgstr ""

#: ../pep-0269.txt:8
msgid "2.2"
msgstr ""

#: ../pep-0269.txt
msgid "Post-History"
msgstr "Pós-história"

#: ../pep-0269.txt:13
msgid "Abstract"
msgstr ""

#: ../pep-0269.txt:15
msgid ""
"Much like the ``parser`` module exposes the Python parser, this PEP proposes "
"that the parser generator used to create the Python parser, ``pgen``, be "
"exposed as a module in Python."
msgstr ""

#: ../pep-0269.txt:21
msgid "Rationale"
msgstr ""

#: ../pep-0269.txt:23
msgid ""
"Through the course of Pythonic history, there have been numerous discussions "
"about the creation of a Python compiler [1]_.  These have resulted in "
"several implementations of Python parsers, most notably the ``parser`` "
"module currently provided in the Python standard library [2]_ and Jeremy "
"Hylton's ``compiler`` module [3]_. However, while multiple language changes "
"have been proposed [4]_ [5]_, experimentation with the Python syntax has "
"lacked the benefit of a Python binding to the actual parser generator used "
"to build Python."
msgstr ""

#: ../pep-0269.txt:33
msgid ""
"By providing a Python wrapper analogous to Fred Drake Jr.'s parser wrapper, "
"but targeted at the ``pgen`` library, the following assertions are made:"
msgstr ""

#: ../pep-0269.txt:37
msgid ""
"Reference implementations of syntax changes will be easier to develop.  "
"Currently, a reference implementation of a syntax change would require the "
"developer to use the ``pgen`` tool from the command line.  The resulting "
"parser data structure would then either have to be reworked to interface "
"with a custom CPython implementation, or wrapped as a C extension module."
msgstr ""

#: ../pep-0269.txt:44
msgid ""
"Reference implementations of syntax changes will be easier to distribute.  "
"Since the parser generator will be available in Python, it should follow "
"that the resulting parser will accessible from Python.  Therefore, reference "
"implementations should be available as pure Python code, versus using custom "
"versions of the existing CPython distribution, or as compilable extension "
"modules."
msgstr ""

#: ../pep-0269.txt:52
msgid ""
"Reference implementations of syntax changes will be easier to discuss with a "
"larger audience.  This somewhat falls out of the second assertion, since the "
"community of Python users is most likely larger than the community of "
"CPython developers."
msgstr ""

#: ../pep-0269.txt:57
msgid ""
"Development of small languages in Python will be further enhanced, since the "
"additional module will be a fully functional LL(1) parser generator."
msgstr ""

#: ../pep-0269.txt:63
msgid "Specification"
msgstr ""

#: ../pep-0269.txt:65
msgid ""
"The proposed module will be called ``pgen``.  The ``pgen`` module will "
"contain the following functions:"
msgstr ""

#: ../pep-0269.txt:70
msgid "``parseGrammarFile (fileName) -> AST``"
msgstr ""

#: ../pep-0269.txt:72
msgid ""
"The ``parseGrammarFile()`` function will read the file pointed to by "
"fileName and create an AST object.  The AST nodes will contain the "
"nonterminal, numeric values of the parser generator meta-grammar.  The "
"output AST will be an instance of the AST extension class as provided by the "
"``parser`` module. Syntax errors in the input file will cause the "
"SyntaxError exception to be raised."
msgstr ""

#: ../pep-0269.txt:82
msgid "``parseGrammarString (text) -> AST``"
msgstr ""

#: ../pep-0269.txt:84
msgid ""
"The ``parseGrammarString()`` function will follow the semantics of the "
"``parseGrammarFile()``, but accept the grammar text as a string for input, "
"as opposed to the file name."
msgstr ""

#: ../pep-0269.txt:90
msgid "``buildParser (grammarAst) -> DFA``"
msgstr ""

#: ../pep-0269.txt:92
msgid ""
"The ``buildParser()`` function will accept an AST object for input and "
"return a DFA (deterministic finite automaton) data structure.  The DFA data "
"structure will be a C extension class, much like the AST structure is "
"provided in the ``parser`` module.  If the input AST does not conform to the "
"nonterminal codes defined for the ``pgen`` meta-grammar, ``buildParser()`` "
"will throw a ``ValueError`` exception."
msgstr ""

#: ../pep-0269.txt:102
msgid "``parseFile (fileName, dfa, start) -> AST``"
msgstr ""

#: ../pep-0269.txt:104
msgid ""
"The ``parseFile()`` function will essentially be a wrapper for the "
"``PyParser_ParseFile()`` C API function.  The wrapper code will accept the "
"DFA C extension class, and the file name.  An AST instance that conforms to "
"the lexical values in the ``token`` module and the nonterminal values "
"contained in the DFA will be output."
msgstr ""

#: ../pep-0269.txt:113
msgid "``parseString (text, dfa, start) -> AST``"
msgstr ""

#: ../pep-0269.txt:115
msgid ""
"The ``parseString()`` function will operate in a similar fashion to the "
"``parseFile()`` function, but accept the parse text as an argument.  Much "
"like ``parseFile()`` will wrap the ``PyParser_ParseFile()`` C API function, "
"``parseString()`` will wrap the ``PyParser_ParseString()`` function."
msgstr ""

#: ../pep-0269.txt:123
msgid "``symbolToStringMap (dfa) -> dict``"
msgstr ""

#: ../pep-0269.txt:125
msgid ""
"The ``symbolToStringMap()`` function will accept a DFA instance and return a "
"dictionary object that maps from the DFA's numeric values for its "
"nonterminals to the string names of the nonterminals as found in the "
"original grammar specification for the DFA."
msgstr ""

#: ../pep-0269.txt:133
msgid "``stringToSymbolMap (dfa) -> dict``"
msgstr ""

#: ../pep-0269.txt:135
msgid ""
"The ``stringToSymbolMap()`` function output a dictionary mapping the "
"nonterminal names of the input DFA to their corresponding numeric values."
msgstr ""

#: ../pep-0269.txt:140
msgid ""
"Extra credit will be awarded if the map generation functions and parsing "
"functions are also methods of the DFA extension class."
msgstr ""

#: ../pep-0269.txt:145
msgid "Implementation Plan"
msgstr ""

#: ../pep-0269.txt:147
msgid "A cunning plan has been devised to accomplish this enhancement:"
msgstr ""

#: ../pep-0269.txt:149
msgid ""
"Rename the ``pgen`` functions to conform to the CPython naming standards.  "
"This action may involve adding some header files to the ``Include`` "
"subdirectory."
msgstr ""

#: ../pep-0269.txt:153
msgid ""
"Move the ``pgen`` C modules in the Makefile.pre.in from unique ``pgen`` "
"elements to the Python C library."
msgstr ""

#: ../pep-0269.txt:156
msgid ""
"Make any needed changes to the ``parser`` module so the AST extension class "
"understands that there are AST types it may not understand.  Cursory "
"examination of the AST extension class shows that it keeps track of whether "
"the tree is a suite or an expression."
msgstr ""

#: ../pep-0269.txt:162
msgid ""
"Code an additional C module in the ``Modules`` directory.  The C extension "
"module will implement the DFA extension class and the functions outlined in "
"the previous section."
msgstr ""

#: ../pep-0269.txt:166
msgid "Add the new module to the build process.  Black magic, indeed."
msgstr ""

#: ../pep-0269.txt:170
msgid "Limitations"
msgstr ""

#: ../pep-0269.txt:172
msgid ""
"Under this proposal, would be designers of Python 3000 will still be "
"constrained to Python's lexical conventions.  The addition, subtraction or "
"modification of the Python lexer is outside the scope of this PEP."
msgstr ""

#: ../pep-0269.txt:179
msgid "Reference Implementation"
msgstr ""

#: ../pep-0269.txt:181
msgid ""
"No reference implementation is currently provided. A patch was provided at "
"some point in http://sourceforge.net/tracker/index.php?"
"func=detail&aid=599331&group_id=5470&atid=305470 but that patch is no longer "
"maintained."
msgstr ""

#: ../pep-0269.txt:188
msgid "References"
msgstr "Referências"

#: ../pep-0269.txt:190
msgid ""
"The (defunct) Python Compiler-SIG http://www.python.org/sigs/compiler-sig/"
msgstr ""

#: ../pep-0269.txt:193
msgid "Parser Module Documentation http://docs.python.org/library/parser.html"
msgstr ""

#: ../pep-0269.txt:196
msgid "Hylton, Jeremy. http://docs.python.org/library/compiler.html"
msgstr ""

#: ../pep-0269.txt:199
msgid "Pelletier, Michel. \"Python Interface Syntax\", :pep:`245`"
msgstr ""

#: ../pep-0269.txt:201
msgid "The Python Types-SIG http://www.python.org/sigs/types-sig/"
msgstr ""

#: ../pep-0269.txt:206
msgid "Copyright"
msgstr "Copyright"

#: ../pep-0269.txt:208
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."
