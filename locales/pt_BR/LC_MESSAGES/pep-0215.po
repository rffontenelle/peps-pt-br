# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0215.txt
msgid "Author"
msgstr "Autor"

#: ../pep-0215.txt:3
msgid "Ka-Ping Yee <ping@zesty.ca>"
msgstr ""

#: ../pep-0215.txt
msgid "Status"
msgstr "Status"

#: ../pep-0215.txt:4
msgid "Superseded"
msgstr ""

#: ../pep-0215.txt
msgid "Type"
msgstr "Tipo"

#: ../pep-0215.txt:5
msgid "Standards Track"
msgstr ""

#: ../pep-0215.txt
msgid "Created"
msgstr "Criada em"

#: ../pep-0215.txt:7
msgid "24-Jul-2000"
msgstr ""

#: ../pep-0215.txt
msgid "Python-Version"
msgstr ""

#: ../pep-0215.txt:8
msgid "2.1"
msgstr ""

#: ../pep-0215.txt
msgid "Post-History"
msgstr "Pós-história"

#: ../pep-0215.txt
msgid "Superseded-By"
msgstr ""

#: ../pep-0215.txt:10
msgid "292"
msgstr ""

#: ../pep-0215.txt:14
msgid "Abstract"
msgstr ""

#: ../pep-0215.txt:16
msgid ""
"This document proposes a string interpolation feature for Python to allow "
"easier string formatting.  The suggested syntax change is the introduction "
"of a '$' prefix that triggers the special interpretation of the '$' "
"character within a string, in a manner reminiscent to the variable "
"interpolation found in Unix shells, awk, Perl, or Tcl."
msgstr ""

#: ../pep-0215.txt:25
msgid "Copyright"
msgstr "Copyright"

#: ../pep-0215.txt:27
msgid "This document is in the public domain."
msgstr ""

#: ../pep-0215.txt:31
msgid "Specification"
msgstr ""

#: ../pep-0215.txt:33
msgid ""
"Strings may be preceded with a '$' prefix that comes before the leading "
"single or double quotation mark (or triplet) and before any of the other "
"string prefixes ('r' or 'u').  Such a string is processed for interpolation "
"after the normal interpretation of backslash-escapes in its contents.  The "
"processing occurs just before the string is pushed onto the value stack, "
"each time the string is pushed.  In short, Python behaves exactly as if '$' "
"were a unary operator applied to the string.  The operation performed is as "
"follows:"
msgstr ""

#: ../pep-0215.txt:43
msgid ""
"The string is scanned from start to end for the '$' character (``\\x24`` in "
"8-bit strings or ``\\u0024`` in Unicode strings).  If there are no '$' "
"characters present, the string is returned unchanged."
msgstr ""

#: ../pep-0215.txt:47
msgid ""
"Any '$' found in the string, followed by one of the two kinds of expressions "
"described below, is replaced with the value of the expression as evaluated "
"in the current namespaces.  The value is converted with ``str()`` if the "
"containing string is an 8-bit string, or with ``unicode()`` if it is a "
"Unicode string."
msgstr ""

#: ../pep-0215.txt:53
msgid ""
"A Python identifier optionally followed by any number of trailers, where a "
"trailer consists of: - a dot and an identifier, - an expression enclosed in "
"square brackets, or - an argument list enclosed in parentheses (This is "
"exactly the pattern expressed in the Python grammar by \"``NAME "
"trailer*``\", using the definitions in ``Grammar/Grammar``.)"
msgstr ""

#: ../pep-0215.txt:61
msgid "Any complete Python expression enclosed in curly braces."
msgstr ""

#: ../pep-0215.txt:63
msgid "Two dollar-signs (\"$$\") are replaced with a single \"$\"."
msgstr ""

#: ../pep-0215.txt:67
msgid "Examples"
msgstr ""

#: ../pep-0215.txt:69
msgid ""
"Here is an example of an interactive session exhibiting the expected "
"behaviour of this feature. ::"
msgstr ""

#: ../pep-0215.txt:95
msgid "Discussion"
msgstr ""

#: ../pep-0215.txt:97
msgid ""
"'$' is chosen as the interpolation character within the string for the sake "
"of familiarity, since it is already used for this purpose in many other "
"languages and contexts."
msgstr ""

#: ../pep-0215.txt:101
msgid ""
"It is then natural to choose '$' as a prefix, since it is a mnemonic for the "
"interpolation character."
msgstr ""

#: ../pep-0215.txt:104
msgid ""
"Trailers are permitted to give this interpolation mechanism even more power "
"than the interpolation available in most other languages, while the "
"expression to be interpolated remains clearly visible and free of curly "
"braces."
msgstr ""

#: ../pep-0215.txt:109
msgid ""
"'$' works like an operator and could be implemented as an operator, but that "
"prevents the compile-time optimization and presents security issues.  So, it "
"is only allowed as a string prefix."
msgstr ""

#: ../pep-0215.txt:116
msgid "Security Issues"
msgstr ""

#: ../pep-0215.txt:118
msgid ""
"\"$\" has the power to eval, but only to eval a literal.  As described here "
"(a string prefix rather than an operator), it introduces no new security "
"issues since the expressions to be evaluated must be literally present in "
"the code."
msgstr ""

#: ../pep-0215.txt:125
msgid "Implementation"
msgstr ""

#: ../pep-0215.txt:127
msgid ""
"The ``Itpl`` module at [1]_ provides a prototype of this feature.  It uses "
"the ``tokenize`` module to find the end of an expression to be interpolated, "
"then calls ``eval()`` on the expression each time a value is needed.  In the "
"prototype, the expression is parsed and compiled again each time it is "
"evaluated."
msgstr ""

#: ../pep-0215.txt:134
msgid ""
"As an optimization, interpolated strings could be compiled directly into the "
"corresponding bytecode; that is, ::"
msgstr ""

#: ../pep-0215.txt:139
msgid "could be compiled as though it were the expression ::"
msgstr ""

#: ../pep-0215.txt:143
msgid "so that it only needs to be compiled once."
msgstr ""

#: ../pep-0215.txt:147
msgid "References"
msgstr "Referências"

#: ../pep-0215.txt:149
msgid "http://www.lfw.org/python/Itpl.py"
msgstr ""
