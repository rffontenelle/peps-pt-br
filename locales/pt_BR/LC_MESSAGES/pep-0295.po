# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0295.txt
msgid "Author"
msgstr "Autor"

#: ../pep-0295.txt:3
msgid "Stepan Koltsov <yozh@mx1.ru>"
msgstr ""

#: ../pep-0295.txt
msgid "Status"
msgstr "Status"

#: ../pep-0295.txt:4
msgid "Rejected"
msgstr ""

#: ../pep-0295.txt
msgid "Type"
msgstr "Tipo"

#: ../pep-0295.txt:5
msgid "Standards Track"
msgstr ""

#: ../pep-0295.txt
msgid "Created"
msgstr "Criada em"

#: ../pep-0295.txt:7
msgid "22-Jul-2002"
msgstr ""

#: ../pep-0295.txt
msgid "Python-Version"
msgstr ""

#: ../pep-0295.txt:8
msgid "3.0"
msgstr ""

#: ../pep-0295.txt
msgid "Post-History"
msgstr "Pós-história"

#: ../pep-0295.txt:13
msgid "Abstract"
msgstr ""

#: ../pep-0295.txt:15
msgid ""
"This PEP describes an interpretation of multiline string constants for "
"Python.  It suggests stripping spaces after newlines and stripping a newline "
"if it is first character after an opening quotation."
msgstr ""

#: ../pep-0295.txt:22
msgid "Rationale"
msgstr ""

#: ../pep-0295.txt:24
msgid ""
"This PEP proposes an interpretation of multiline string constants in "
"Python.  Currently, the value of string constant is all the text between "
"quotations, maybe with escape sequences substituted, e.g.::"
msgstr ""

#: ../pep-0295.txt:42
msgid "prints::"
msgstr ""

#: ../pep-0295.txt:47
msgid "This PEP suggest two things:"
msgstr ""

#: ../pep-0295.txt:49
msgid "ignore the first character after opening quotation, if it is newline"
msgstr ""

#: ../pep-0295.txt:52
msgid ""
"ignore in string constants all spaces and tabs up to first non-whitespace "
"character, but no more than current indentation."
msgstr ""

#: ../pep-0295.txt:56
msgid "After applying this, previous program will print::"
msgstr ""

#: ../pep-0295.txt:61
msgid ""
"To get this result, previous programs could be rewritten for current Python "
"as (note, this gives the same result with new strings meaning)::"
msgstr ""

#: ../pep-0295.txt:75
msgid ""
"Or stripping can be done with library routines at runtime (as pydoc does), "
"but this decreases program readability."
msgstr ""

#: ../pep-0295.txt:80
msgid "Implementation"
msgstr ""

#: ../pep-0295.txt:82
msgid "I'll say nothing about CPython, Jython or Python.NET."
msgstr ""

#: ../pep-0295.txt:84
msgid ""
"In original Python, there is no info about the current indentation (in "
"spaces) at compile time, so space and tab stripping should be done at parse "
"time.  Currently no flags can be passed to the parser in program text (like "
"``from __future__ import xxx``).  I suggest enabling or disabling of this "
"feature at Python compile time depending of CPP flag "
"``Py_PARSE_MULTILINE_STRINGS``."
msgstr ""

#: ../pep-0295.txt:93
msgid "Alternatives"
msgstr ""

#: ../pep-0295.txt:95
msgid ""
"New interpretation of string constants can be implemented with flags 'i' and "
"'o' to string constants, like::"
msgstr ""

#: ../pep-0295.txt:112
msgid ""
"Also this feature can be disabled if string is raw, i.e. if flag 'r' "
"specified."
msgstr ""

#: ../pep-0295.txt:117
msgid "Copyright"
msgstr "Copyright"

#: ../pep-0295.txt:119
msgid "This document has been placed in the Public Domain."
msgstr ""
