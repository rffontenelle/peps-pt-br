# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-28 20:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../pep-0467.txt
msgid "Author"
msgstr "Autor"

#: ../pep-0467.txt:5
msgid "Nick Coghlan <ncoghlan@gmail.com>, Ethan Furman <ethan@stoneleaf.us>"
msgstr ""

#: ../pep-0467.txt
msgid "Status"
msgstr "Status"

#: ../pep-0467.txt:6
msgid "Draft"
msgstr ""

#: ../pep-0467.txt
msgid "Type"
msgstr "Tipo"

#: ../pep-0467.txt:7
msgid "Standards Track"
msgstr ""

#: ../pep-0467.txt
msgid "Created"
msgstr "Criada em"

#: ../pep-0467.txt:9
msgid "30-Mar-2014"
msgstr ""

#: ../pep-0467.txt
msgid "Python-Version"
msgstr ""

#: ../pep-0467.txt:10
msgid "3.12"
msgstr ""

#: ../pep-0467.txt
msgid "Post-History"
msgstr "Pós-história"

#: ../pep-0467.txt:11
msgid ""
"30-Mar-2014, 15-Aug-2014, 16-Aug-2014, 07-Jun-2016, 01-Sep-2016, 13-"
"Apr-2021, 03-Nov-2021"
msgstr ""

#: ../pep-0467.txt:16
msgid "Abstract"
msgstr ""

#: ../pep-0467.txt:18
msgid ""
"This PEP proposes five small adjustments to the APIs of the ``bytes`` and "
"``bytearray`` types to make it easier to operate entirely in the binary "
"domain:"
msgstr ""

#: ../pep-0467.txt:21
msgid "Add ``fromsize`` alternative constructor"
msgstr ""

#: ../pep-0467.txt:22
msgid "Add ``fromint`` alternative constructor"
msgstr ""

#: ../pep-0467.txt:23
msgid "Add ``ascii`` alternative constructor"
msgstr ""

#: ../pep-0467.txt:24
msgid "Add ``getbyte`` byte retrieval method"
msgstr ""

#: ../pep-0467.txt:25
msgid "Add ``iterbytes`` alternative iterator"
msgstr ""

#: ../pep-0467.txt:28
msgid "Rationale"
msgstr ""

#: ../pep-0467.txt:30
msgid ""
"During the initial development of the Python 3 language specification, the "
"core ``bytes`` type for arbitrary binary data started as the mutable type "
"that is now referred to as ``bytearray``. Other aspects of operating in the "
"binary domain in Python have also evolved over the course of the Python 3 "
"series, for example with :pep:`461`."
msgstr ""

#: ../pep-0467.txt:38
msgid "Motivation"
msgstr ""

#: ../pep-0467.txt:40
msgid ""
"With Python 3 and the split between ``str`` and ``bytes``, one small but "
"important area of programming became slightly more difficult, and much more "
"painful -- wire format protocols."
msgstr ""

#: ../pep-0467.txt:44
msgid ""
"This area of programming is characterized by a mixture of binary data and "
"ASCII compatible segments of text (aka ASCII-encoded text).  The addition of "
"the new constructors, methods, and iterators will aid both in writing new "
"wire format code, and in porting any remaining Python 2 wire format code."
msgstr ""

#: ../pep-0467.txt:49
msgid ""
"Common use-cases include ``dbf`` and ``pdf`` file formats, ``email`` "
"formats, and ``FTP`` and ``HTTP`` communications, among many others."
msgstr ""

#: ../pep-0467.txt:54
msgid "Proposals"
msgstr ""

#: ../pep-0467.txt:57
msgid ""
"Addition of explicit \"count and byte initialised sequence\" constructors"
msgstr ""

#: ../pep-0467.txt:59
msgid ""
"To replace the now discouraged behavior, this PEP proposes the addition of "
"an explicit ``fromsize`` alternative constructor as a class method on both "
"``bytes`` and ``bytearray`` whose first argument is the count, and whose "
"second argument is the fill byte to use (defaults to ``\\x00``)::"
msgstr ""

#: ../pep-0467.txt:73
msgid ""
"``fromsize`` will behave just as the current constructors behave when passed "
"a single integer, while allowing for non-zero fill values when needed."
msgstr ""

#: ../pep-0467.txt:78
msgid "Addition of explicit \"single byte\" constructors"
msgstr ""

#: ../pep-0467.txt:80
msgid ""
"As binary counterparts to the text ``chr`` function, this PEP proposes the "
"addition of an explicit ``fromint`` alternative constructor as a class "
"method on both ``bytes`` and ``bytearray``::"
msgstr ""

#: ../pep-0467.txt:89
msgid ""
"These methods will only accept integers in the range 0 to 255 (inclusive)::"
msgstr ""

#: ../pep-0467.txt:101
msgid ""
"The documentation of the ``ord`` builtin will be updated to explicitly note "
"that ``bytes.fromint`` is the primary inverse operation for binary data, "
"while ``chr`` is the inverse operation for text data, and that ``bytearray."
"fromint`` also exists."
msgstr ""

#: ../pep-0467.txt:106
msgid ""
"Behaviorally, ``bytes.fromint(x)`` will be equivalent to the current "
"``bytes([x])`` (and similarly for ``bytearray``). The new spelling is "
"expected to be easier to discover and easier to read (especially when used "
"in conjunction with indexing operations on binary sequence types)."
msgstr ""

#: ../pep-0467.txt:111
msgid ""
"As a separate method, the new spelling will also work better with higher "
"order functions like ``map``."
msgstr ""

#: ../pep-0467.txt:114
msgid ""
"These new methods intentionally do NOT offer the same level of general "
"integer support as the existing ``int.to_bytes`` conversion method, which "
"allows arbitrarily large integers to be converted to arbitrarily long bytes "
"objects. The restriction to only accept positive integers that fit in a "
"single byte means that no byte order information is needed, and there is no "
"need to handle negative numbers. The documentation of the new methods will "
"refer readers to ``int.to_bytes`` for use cases where handling of arbitrary "
"integers is needed."
msgstr ""

#: ../pep-0467.txt:124
msgid "Addition of \"ascii\" constructors"
msgstr ""

#: ../pep-0467.txt:126
msgid ""
"In Python 2 converting an object, such as the integer ``123``, to bytes (aka "
"the Python 2 ``str``) was as simple as::"
msgstr ""

#: ../pep-0467.txt:132
msgid "With Python 3 that became the more verbose::"
msgstr ""

#: ../pep-0467.txt:136
msgid "or even::"
msgstr ""

#: ../pep-0467.txt:140
msgid ""
"This PEP proposes that an ``ascii`` method be added to ``bytes`` and "
"``bytearray`` to handle this use-case::"
msgstr ""

#: ../pep-0467.txt:146
msgid ""
"Note that ``bytes.ascii()`` would handle simple ascii-encodable text "
"correctly, unlike the ``ascii()`` built-in::"
msgstr ""

#: ../pep-0467.txt:154
msgid "Addition of \"getbyte\" method to retrieve a single byte"
msgstr ""

#: ../pep-0467.txt:156
msgid ""
"This PEP proposes that ``bytes`` and ``bytearray`` gain the method "
"``getbyte`` which will always return ``bytes``::"
msgstr ""

#: ../pep-0467.txt:162
msgid "If an index is asked for that doesn't exist, ``IndexError`` is raised::"
msgstr ""

#: ../pep-0467.txt:171
msgid "Addition of optimised iterator methods that produce ``bytes`` objects"
msgstr ""

#: ../pep-0467.txt:173
msgid ""
"This PEP proposes that ``bytes`` and ``bytearray`` gain an optimised "
"``iterbytes`` method that produces length 1 ``bytes`` objects rather than "
"integers::"
msgstr ""

#: ../pep-0467.txt:180
msgid "For example::"
msgstr ""

#: ../pep-0467.txt:187
msgid "Design discussion"
msgstr ""

#: ../pep-0467.txt:190
msgid ""
"Why not rely on sequence repetition to create zero-initialised sequences?"
msgstr ""

#: ../pep-0467.txt:192
msgid "Zero-initialised sequences can be created via sequence repetition::"
msgstr ""

#: ../pep-0467.txt:199
msgid ""
"However, this was also the case when the ``bytearray`` type was originally "
"designed, and the decision was made to add explicit support for it in the "
"type constructor. The immutable ``bytes`` type then inherited that feature "
"when it was introduced in :pep:`3137`."
msgstr ""

#: ../pep-0467.txt:204
msgid ""
"This PEP isn't revisiting that original design decision, just changing the "
"spelling as users sometimes find the current behavior of the binary sequence "
"constructors surprising. In particular, there's a reasonable case to be made "
"that ``bytes(x)`` (where ``x`` is an integer) should behave like the ``bytes."
"fromint(x)`` proposal in this PEP. Providing both behaviors as separate "
"class methods avoids that ambiguity."
msgstr ""

#: ../pep-0467.txt:213
msgid "Omitting the originally proposed builtin function"
msgstr ""

#: ../pep-0467.txt:215
msgid ""
"When submitted to the Steering Council, this PEP proposed the introduction "
"of a ``bchr`` builtin (with the same behaviour as ``bytes.fromint``), "
"recreating the ``ord``/``chr``/``unichr`` trio from Python 2 under a "
"different naming scheme (``ord``/``bchr``/``chr``)."
msgstr ""

#: ../pep-0467.txt:220
msgid ""
"The SC indicated they didn't think this functionality was needed often "
"enough to justify offering two ways of doing the same thing, especially when "
"one of those ways was a new builtin function. That part of the proposal was "
"therefore dropped as being redundant with the ``bytes.fromint`` alternate "
"constructor."
msgstr ""

#: ../pep-0467.txt:225
msgid ""
"Developers that use this method frequently will instead have the option to "
"define their own ``bchr = bytes.fromint`` aliases."
msgstr ""

#: ../pep-0467.txt:230
msgid "Scope limitation: memoryview"
msgstr ""

#: ../pep-0467.txt:232
msgid ""
"Updating ``memoryview`` with the new item retrieval methods is outside the "
"scope of this PEP."
msgstr ""

#: ../pep-0467.txt:237
msgid "References"
msgstr "Referências"

#: ../pep-0467.txt:239
msgid ""
"`Initial March 2014 discussion thread on python-ideas <https://mail.python."
"org/pipermail/python-ideas/2014-March/027295.html>`_"
msgstr ""

#: ../pep-0467.txt:240
msgid ""
"`Guido's initial feedback in that thread <https://mail.python.org/pipermail/"
"python-ideas/2014-March/027376.html>`_"
msgstr ""

#: ../pep-0467.txt:241
msgid ""
"`Issue proposing moving zero-initialised sequences to a dedicated API "
"<https://github.com/python/cpython/issues/65094>`_"
msgstr ""

#: ../pep-0467.txt:242
msgid ""
"`Issue proposing to use calloc() for zero-initialised binary sequences "
"<https://github.com/python/cpython/issues/65843>`_"
msgstr ""

#: ../pep-0467.txt:243
msgid ""
"`August 2014 discussion thread on python-dev <https://mail.python.org/"
"pipermail/python-ideas/2014-March/027295.html>`_"
msgstr ""

#: ../pep-0467.txt:244
msgid ""
"`June 2016 discussion thread on python-dev <https://mail.python.org/"
"pipermail/python-dev/2016-June/144875.html>`_"
msgstr ""

#: ../pep-0467.txt:248
msgid "Copyright"
msgstr "Copyright"

#: ../pep-0467.txt:250
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."
